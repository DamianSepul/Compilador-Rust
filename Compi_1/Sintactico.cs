using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Compi_1
{
    public class Sintactico
    {
        public List<Error> listaError;
        List<Token> listaTokens;
        public List<Varia> listaVariables;
        public List<string> ListaPolaca;
        List<string> ListaOpera;
        List<int> ListaTipos;

        private int[] listasintactico = new int[500];
        public bool error = false;

        bool revision = false;
        string X, Y;
        int puntolexico = 0;
        int puntosintactico = 1;
        string aux;
        string aux2;
        int Op1, Op2;
        int convertido;


        int intentosRecuperar;
        TipoRecuperacion tipoRecuperacion;

        enum TipoRecuperacion
        {
            Ninguna,
            Falta,
            Sobra,
            Diferentes,
            Urgencia,
            NoMas
        }

        public int[,] MatrizTransacionSintactico = new int[,]
        {
                                // id   |  ent  |   dec |   cad |   (   |   )   |   ;   |   .   |   [   |   ]   |   {   |   }   |   ,   |   carac   |   -   |   *   |   /   |   =   |   +=  |   *=  |   /=  |   ||  |   &&  |   |   |   &   |   ++  |   --  |   <   |   >   |   >=  |   <=  |   !=  |   ==  |   -=  |   %   |   ¡   |   :   |   ::  |   ^   |   ^=  |   |=  |   ->  |   >>  |   <<  |   <<= |   >>= |   !   |   as  |   break   |   const   |   continue    |   crate   |   else    |   enum    |   extern  |   false   |   fn  |   for |   if  |   impl    |   in  |   let |   loop    |   match   |   mod |   move    |   mut |   pub |   ref |   self    |   static  |   struct  |   super   |   trait   |   true    |   type    |   use |   where   |   while   |   become  |   std |   do  |   final   |   override    |   priv    |   typeof  |   unsized |   virtual |   try |   auto    |   catch   |   default |   new |   String  |   main    |   print   |   println!    |   i32 |   str |   u8  |   f32 |   f64 |   @   | + |   
            /*0S*/             {  -600,   -600,    -600  ,  -600  ,  -600  ,  -600   , -600  ,  -600 ,   -600  ,  -600  ,  -600  ,  -600  ,  -600,    -600  ,  -600 ,   -600  ,  -600  ,  -600  ,  -600 ,   -600  ,  -600 ,   -600 ,   -600 ,   -600  ,  -600  ,  -600  ,  -600  ,  -600  ,  -600 ,   -600 ,   -600 ,   -600 ,   -600  ,  -600  ,  -600  ,  -600 ,   -600 ,   -600  ,  -600   , -600 ,   -600 ,   -600  ,  -600  ,  -600 ,   -600  ,  -600 ,  -600    ,-600  ,  -600   , -600  ,  -600  ,  -600  ,  -600  ,  -600 ,   -600  ,  -600  ,  1 ,  -600  ,  -600 ,   1 ,  -600  ,  -600  ,  -600  ,  -600 ,   -600  ,  -600 ,   -600  ,  -600  ,  -600   , -600  ,  -600 ,   1 ,  -600 ,   1  , -600 ,   -600  ,  1 ,  -600  ,  -600  ,  -600 ,   -600  ,  -600  ,  -600 ,   -600,    -600 ,   -600  ,  -600 ,   -600   , -600   , -600 ,   -600  ,  -600   , -600  ,  -600  ,  -600 ,   -600 ,   -600,    -600  ,  -600 ,  -600   , -600 ,   -600  ,  -600  ,  -600 },
            /*1Programa*/      {   -600,  -600  ,  -600   , -600  ,  -600   , -600 ,   -600   , -600  ,  -600 ,  -600   , -600  ,  -600 ,   -600  ,  -600  ,  -600  ,  -600  ,  -600 ,   -600,    -600  ,  -600  ,  -600   , -600    ,-600    ,-600  ,  -600  , -600 ,   -600  ,  -600,    -600  ,  -600   , -600 ,   -600 ,   -600 ,   -600  ,  -600 ,  -600  ,  -600  ,  -600  ,  -600   , -600  ,  -600  ,  -600  ,  -600  ,  -600   , -600 ,   -600  ,  -600   , -600  ,  -600  ,  -600 ,   -600 ,   -600 ,   -600 ,   -600  ,  -600 ,   -600 ,   2 ,  -600 ,   -600 ,   2  , -600  ,  -600  ,  -600 ,   -600  ,  -600 ,   -600  ,  -600,    -600  ,  -600  ,  -600  ,  -600  ,  2  , -600  ,  2  , -600 ,   -600  ,  2 ,  -600 ,   -600   , -600  ,  -600  ,  -600   , -600  ,  -600 ,   -600 ,   -600  ,  -600   , -600 ,   -600 ,   -600  ,  -600 ,   -600 ,   -600  ,  -600 ,   -600  ,  -600  ,  -600 ,   -600,    -600 ,   -600  ,  -600  ,  -600 ,   -600  ,  -600 },
            /*2Librerias*/     {  -601,   -601,    -601 ,   -601  ,  -601 ,   -601  ,  -601   , -601   , -601 ,   -601 ,   -601  ,  -601  ,  -601 ,   -601 ,   -601  ,  -601 ,   -601 ,   -601 ,   -601 ,  -601  ,  -601 ,   -601,    -601,    -601 ,   -601  ,  -601,    -601,    -601,    -601 ,   -601 ,   -601  ,  -601  ,  -601,    -601 ,   -601 ,   -601  ,  -601  ,  -601 ,   -601   , -601  ,  -601 ,   -601 ,   -601 ,   -601 ,   -601  ,  -601 ,   -601  ,  -601,    -601 ,   -601 ,   -601 ,   -601  ,  -601   , -601 ,   -601 ,   -601 ,   3 ,  -601  ,  -601 ,   3  , -601 ,   -601  ,  -601  ,  -601 ,   -601  ,  -601 ,   -601 ,   -601   , -601 ,   -601,    -601,    3 ,  -601 ,   3  , -601  ,  -601  ,  4  , -601 ,   -601 ,   -601  ,  -601  ,  -601   , -601  ,  -601   , -601  ,  -601  ,  -601  ,  -601 ,   -601 ,   -601   , -601   , -601   , -601  ,  -601   , -601  ,  -601   , -601  ,  -601  ,  -601  ,  -601  ,  -601    ,-601  ,  3  ,  -601},
            /*3Lib1*/          {5,    -601,    -601,    -601,    -601,    -601,    5,   -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,   -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,   -601 ,   -601 ,   -601 ,   -601 ,   5,   -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    5,   -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601,    -601 },
            /*4Funciones*/     {-602 ,-602,    -602 ,   -602  ,  -602 ,   -602,    3,   -602 ,   -602 ,   -602  ,  -602  ,  3  ,  -602   , -602 ,   -602 ,   -602 ,   -602 ,   -602 ,   -602,   -602  ,  -602 ,   -602  ,  -602   , -602 ,   -602   , -602 ,   -602 ,   -602   , -602  ,  -602  ,  -602  , -602 ,   -602,    -602 ,   -602 ,   -602  ,  -602 ,   -602  ,  -602 ,   -602 ,   -602   , -602  ,  -602 ,   -602   , -602   , -602  ,  -602  ,  -602 ,   -602,    -602 ,   -602 ,   -602  ,  -602 ,   -602 ,   -602   , -602  ,  6  , -602  ,  -602  ,  3 ,  -602 ,   -602  ,  -602 ,   -602  ,  -602 ,   -602  ,  -602 ,   -602  ,  -602  ,  -602  ,  -602  ,  7  , -602  ,  7 ,  -602  ,  -602 ,   7 ,  -602,    -602   , -602   , -602  ,  -602   , -602 ,   -602 ,   -602   , -602 ,   -602    ,-602 ,   -602  ,  -602  ,  -602   , -602 ,   -602 ,   -602  ,  -602  ,  -602 ,   -602  ,  -602   , -602 ,   -602  ,  -602 ,   -602 ,   7 ,  -602},
            /*5Funcion1*/      {-602, -602,    -602 ,   -602 ,   -602,    -602,    -602,    -602,    -602,    -602,    -602,    -602 ,   -602,    -602,    -602 ,   -602 ,   -602,    -602,    -602 ,   -602,    -602,    -602,    -602 ,   -602 ,   -602,    -602 ,   -602 ,   -602,   -602 ,   -602,    -602,    -602 ,   -602,    -602 ,   -602 ,   -602 ,   -602,    -602 ,   -602 ,   -602 ,   -602,    -602,    -602 ,   -602 ,   -602 ,   -602 ,   -602 ,   -602 ,   -602 ,   -602 ,   -602 ,   -602 ,   -602 ,   -602  ,  -602 ,   -602,    8  , -602 ,   -602 ,   -602 ,   -602,    -602 ,   -602,    -602 ,   -602,    -602 ,   -602 ,   -602 ,   -602 ,   -602,    -602 ,   -602 ,   -602 ,   -602 ,   -602 ,   -602 ,   -602,   -602 ,   -602 ,   -602  ,  -602 ,   -602  ,  -602   , -602  ,  -602 ,   -602 ,   -602 ,   -602  ,  -602  ,  -602  ,  -602  ,  -602  ,  -602 ,   -602,    -602 ,   -602  ,  -602  ,  -602  ,  -602  ,  -602  ,  -602 ,   -602 ,   -602 ,   -602},
            /*6Funcion2*/      {},
            /*7Parametros*/    {11,   -604,    -604,    -604,    -604,    12,    -604,    -604,    -604 ,   -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,   -604,    -604,    -604 ,   -604 ,   -604 ,   -604 ,   -604,    -604,    -604 ,   -604,    -604 ,   -604 ,   -604,    -604 ,   -604  ,  -604 ,   -604 ,   -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    13,  -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604 ,   -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    11,    11,    11,    11,    11,    13,  -604 },
            /*8Parametros1*/   {},
            /*9Factor*/        {15,   17,  18,  16,  144,   -604,    3,    -604,    -604,    -604,    -604,    -604,    -604,   -604,    -604,    -604,    -604,    -604,   -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604 ,   -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604 ,   -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,    -604,   -604 },
            /*10miembros*/      {19,   19,  19,  19,  -605,    -605,    3,    -605,    -605,    -605,    -605,    20,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    19,    19,    -605,    -605,    19,    -605,    19,    -605,   -605,    -605,    -605,    -605,    -605 ,   -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    19,    19,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    19,    -605,    -605,    -605,    -605,    -605,    20,  -605},
            /*11miembros2*/     {21,   21,  21,  21,  -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605 ,   -605,    -605,    -605 ,   -605,    -605,    -605 ,   -605,    -605,    -605 ,   -605,    -605,    -605,    -605,    -605,   -605,    -605,   -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605 ,   -605,    -605,    -605,    -605,    -605,    -605,    21,    21,    -605,    -605,    21,    -605,    21,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605 ,   -605,    -605,    -605 ,   -605,    21,    21,    -605,    -605,    -605,    -605,    -605,    -605 ,   -605,    -605,    -605,    -605,    -605,    -605,    -605 ,   -605,    -605,    -605,    21,    -605,    -605,    -605,    -605,    -605 ,   -605,    -605},
            /*12Xmiembros3*/     {27,   23,  23,  23,  -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605 ,   -605 ,   -605,    -605,    -605,    -605,    -605 ,   -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,    -605,   -605,   -605,    -605,    23,    23,  -605,    -605,    24,  -605,   23,    -605,    -605,    -605,    -605,   -605,    -605,    -605,    -605,    -605 ,   -605,    -605 ,   -605,    -605,    -605,    23,    23,   -605 ,   -605,    -605,    -605,    -605,    -605,    -605,    -605 ,   -605 ,   -605,    -605 ,   -605,    -605,    -605  ,  -605 ,   -605 ,   23,   -605,    -605 ,   -605 ,   -605 ,   -605 ,   -605   , -605},
            /*13Xasignacion*/    {28,  28,  28,  28,  29, 29, 3,  3,    -606,    -606,    28,  28,  -606,    27,    -606,    -606,    -606,  27  , -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,   -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606,    -606 ,   -606,    -606,    -606,    -606,    -606,    29, -606,    -606,    -606,    -606,    -606 ,   -606,    -606 ,   -606,    -606,    -606 ,   -606,    -606 ,   -606 ,   -606,    -606,    -606,    -606,    -606,    -606,    -606 ,   -606 ,   -606 ,   -606 ,   -606,    -606,    -606 ,   -606,    -606,    -606,    -606,    -606 ,   -606 ,   -606 ,   -606},
            /*14Xsentencias*/    {},
            /*15Xdeclaracion*/   {32,   -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608 ,   -608,   -608 ,   -608,    -608,    -608,    -608,    -608 ,   -608,    -608 ,   -608 ,   -608,    -608 ,   -608 ,   -608 ,   -608 ,   -608 ,   -608  ,  -608,    -608,    -608,    -608,    -608 ,   -608,    -608,    -608,    -608,    -608,    -608,    -608,    32,  -608 ,   -608,    -608,    -608,    32,  -608,    -608,    -608 ,   -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,   -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608},
            /*16Xinvocaestru*/   {33,   -609,    -609,    -609,    33,    33,    33,    33,  -609,    -609,    -609,    -609,    -609,    -609 ,   -609,    -609,    -609,    33,  -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609,    -609 ,   -609,    -609,    -609,    -609,    -609 ,   -609 ,   -609,    -609,    -609,    608},
            /*17Xexp*/           { 34,   34,        34,    34,    144,    3,    3,   -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610 ,   -610 ,   -610,    -610,    -610,    -610 ,   -610,    -610,    -610,    -610,    -610,    -610 ,   -610 ,   -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610,    -610 ,   -610,    -610,    -610,    -610,    -610,    34},
            /*18Xtermino*/       { 36,  -611,    -611,    -611,    -611,    3,    3,   -611,    -611,    -611,    3,    3,    -611,    -611,    36,    36,    36,    -611,    -611,    -611,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611,    -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611  ,  -611  ,  -611 ,   -611 ,   -611 ,   -611  ,  -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611  ,  -611  ,  -611  ,  -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611 ,   -611  ,  -611  ,  -611 ,   -611 ,   -611 ,   -611  ,  -611  ,  -611 ,   -611 ,   -611 ,   35 , 36},
            /*19Xopera*/         {-612, -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    38,  39,  40,  -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612 ,   -612,    -612,    -612,    -612 ,   -612 ,   -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612 ,   -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612 ,   -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,   -612,    -612,    -612,    -612,    -612,    -612,    -612,    -612,    37 },
            /*20Xasigestruc*/    { 41,  -613,    -613,    -613,    -613 ,   3,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,   -613,    -613,    -613,    -613,    -613,    41,  -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613 ,   -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613 ,   -613,    -613,    -613,    -613,    -613,    -613,    -613,    3,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613 ,   -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613 ,   -613,    -613,    -613,    -613,    -613 ,   -613 ,   -613,    -613,    -613,    -613,    -613,    -613,    -613 ,   -613,    -613,    -613,    -613},
            /*21Xasigestruc2*/   {43,   -613,    -613,    -613,    -613,    3,    -613,    -613,    -613,    -613,    -613,    42,    43,  -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    43,  -613 ,   -613,    -613 ,   -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613 ,   -613,    -613,    -613,    -613 ,   -613,    -613 ,   -613 ,   -613,    -613,    -613,    -613,    -613 ,   -613,    -613,    -613 ,   -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    -613,    42,  -613 },
            /*22Xsentencia*/     {50,   -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614,    -614 ,   -614 ,   -614 ,   -614,    -614    ,-614,    -614 ,   -614  ,  -614 ,   -614  ,  -614  ,  -614  ,  -614 ,   -614 ,   -614 ,   -614  ,  -614 ,   -614   , -614,    -614 ,   -614 ,   -614 ,   -614 ,   -614  ,  -614, -614,    -614 ,   -614  ,  -614,    -614  ,  -614  ,  -614,    -614  ,  48 , 46,  -614  ,  -614 ,   53,  47 , 54,  -614 ,   -614 ,   -614   , -614 ,   -614,    -614 ,   -614 ,   -614 ,   -614  ,  -614   , -614 ,   -614  ,  -614 ,   -614,    49 , -614 ,   -614  ,  -614   , -614  ,  -614  ,  -614  ,  -614,    -614 ,   -614 ,   -614 ,   -614 ,   -614  ,  -614  ,  -614  ,  -614 ,   -614  ,  -614  ,  51,  -614,    -614,    -614,    -614 ,   -614 ,   -614  ,  -614 },
            /*23Xif*/            {-615, -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    55,  55,  -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615 ,   -615,    -615 ,   -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    55,  -615,    -615,    -615,    -615,    -615,    55,  -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    55,  -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615 ,   -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615,    -615},
            /*24Xloop*/          {-616, -616,    -616,    -616,    -616,    -616,    56,  -616,    -616,    -616,    56,  56,  -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    56,  -616 ,   -616,    -616 ,   -616,    -616,    -616,    -616,    -616,    -616,    56,  -616,    -616,    -616 ,   56,  -616,    -616,    -616 ,   -616 ,   -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616 ,   -616,    -616,   -616 ,   -616,    -616,    -616 ,   -616 ,   -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616 ,   -616 ,   -616 ,   -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616,    -616},
            /*25Xfor*/           {57,   -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    57,  57,  -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617 ,   -617,    -617,    -617,    -617,    -617,    -617,    -617 ,   57,  57,  -617,    57 , -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617 ,   -617,    -617,    -617,    -617,    -617,    -617 ,   -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617,    -617},
            /*26Xwhile*/         {-618, -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    58,  58,  -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,   -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618 ,   -618 ,   -618 ,   -618 ,   -618 ,   -618 ,   -618 ,   -618  ,  -618,    58,  -618,    -618,    -618,    -618,    -618,    -618,    -618,   -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    58,  -618,    -618,    -618,    58,  -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618,    -618},
            /*27Xleer*/          {59,   -619,    -619,    -619,    59,  59,  59,  -619,    -619,    -619,    -619,    -619,    -619 ,   -619,    -619,    -619,    -619,    59,  -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    59,  -619,    -619,    -619,    -619,    -619,    -619,    -619 ,   -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619 ,   -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619 ,   -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619 ,   -619,    -619,    -619,    -619,    -619,    -619,    -619,    -619 ,   -619,    -619,    -619 ,   -619 ,   -619,    -619,    -619,    -619 ,   -619,   -619,    -619 ,   -619,    59,  59 , -619 ,   -619,    -619 ,   -619,    -619,    -619,    -619 ,   -619,    -619,    -619},
            /*28Xescribir*/      {60,   -620,    -620,    60,  60,  -620,    60,  -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620,    -620 ,   -620,    -620,    -620,    -620,    -620,    -620,    -620 ,   -620 ,   -620 ,   -620,    -620,    -620,    -620,    -620,    -620 ,   -620,    -620,    -620,    -620 ,   -620,    -620,    -620 ,   -620,    -620,    -620,    -620 ,   -620 ,   -620 ,   -620 ,   -620,    -620,    -620,    -620,    -620,    -620 ,   -620,    -620,    -620 ,   -620 ,   -620 ,   -620 ,   -620 ,   -620 ,   -620 ,   -620 ,   -620 ,   -620  ,  -620,    -620,    -620,    -620,    -620,    -620,    60,  -620,    -620,    -620,    -620,    -620,    -620 ,   -620},
            /*29Xmatch*/         {61,  61, -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,   -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621 ,   -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621 ,   -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    61, -621,    -621,    -621,    -621,    -621 ,   -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621},
            /*30Xcondicional*/   {},
            /*31Xfactorcond*/    {},
            /*32Xterminocond*/   {-622, -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    3,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    66,  -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622 ,   -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,   -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622 ,   66,  -622,    -622,    -622,    -622,    -622,    -622 ,   -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622,    -622},
            /*33Xoprel*/         {-623, -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    68,  67,  69,  70,  72,  71,  -623,    -623,    -623,    -623 ,   -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623,    -623},
            /*34Xoplog*/         {-624, -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    74,  73,  -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624,    -624},
            /*35Xelse*/          {-625, -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    76,  3,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    76,  -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    75,  -625},
            /*36Xelse1*/         {-625, -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    77,  77,  -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625 ,   -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,   -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    78,  -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625,    -625},
            /*37Xforcond*/       {},
            /*38Xforcond2*/      {80,   -626,    -626,    -626,    -626,    -626,    -626,    80,  -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626 ,   -626,    -626,    -626,    -626,    -626,    -626,    -626 ,   -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626 ,   -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626 ,   -626 ,   -626,    -626,    -626 ,   -626,    -626,    -626 ,  -626 ,   -626 ,   -626  ,  -626  ,  -626,   -626   , -626  ,  -626,    -626 ,   -626  ,  -626  ,  -626  ,  -626 ,   -626},
            /*39Xforigual*/      {-626, 81,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626,    -626 ,   82 , -626 ,   -626 ,   -626 ,   -626   , -626   , -626 ,   -626  ,  -626 ,   -626 ,   -626 ,   -626 ,   -626,    -626,   -626 ,   -626,   -626 ,   -626   , -626  ,  -626 ,   -626  ,  -626 ,   -626 ,   -626 ,   -626 ,   -626 ,   -626  ,  -626  ,  -626  ,  -626  ,  -626 ,   -626 ,   -626 ,   -626 ,   -626  ,  -626   , -626 ,   -626,    -626,    -626,    -626 ,   -626  ,  -626 ,   -626 ,   -626 ,   -626 ,   -626 ,   -626  ,  -626 ,   -626 ,   -626 ,   -626 ,   -626  ,  -626 ,   -626 ,   -626  ,  -626  ,  -626 ,   -626,    -626 ,   -626 ,   -626 ,   -626 ,   -626 ,   -626,    -626 ,   -626 ,   -626 ,   -626  ,  -626   , -626 ,   -626  ,  -626 ,   -626  ,  -626 ,  -626  ,  -626 ,   -626 ,   -626   , -626 ,   -626 ,   -626 ,   -626   , -626   , -626  ,  -626 , -626},
            /*40Xleervar*/       {83,   -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627,    -627 ,   -627,    -627,    -627 ,   -627,    -627,    -627 ,   -627,    -627,    -627,    -627,    -627  ,  -627,    -627 ,   -627,    -627 ,   -627,    -627 ,   -627 ,   -627 ,   -627 ,    -627 ,   -627 ,   -627  ,  -627 ,   -627  ,  -627  ,  -627  ,  -627  ,  -627 ,   -627,    -627  ,  84 , -627 ,   -627 ,   -627 ,   -627 ,   -627 ,   -627 ,   -627 ,   -627   , -627   , -627 ,   -627  ,  -627 ,   -627  ,  -627  ,  -627 ,   -627 ,   -627  ,  -627 ,   -627   , -627 ,   -627,    -627,    -627 ,   -627 ,   -627 ,   -627  ,  -627,    -627 ,   -627   , -627  ,  -627  ,  -627 ,   -627  ,  -627  ,  -627 ,   -627 ,   -627  ,  -627,    -627  ,  -627  ,  -627  ,  -627},
            /*41Xescribircade*/  {86,   -628,    -628,    86,    -628,    -628,    -628,    -628,    -628,    -628,    -628 ,   -628,    -628 ,   -628,    -628,    -628 ,   -628 ,   -628   , -628  ,  -628  ,  -628  ,  -628 ,   -628 ,   -628,    -628  ,  -628 ,   -628,    -628 ,   -628 ,   -628 ,   -628 ,   -628,    -628   , -628 ,   -628  ,  -628 ,   -628   , -628   , -628,    -628 ,   -628  ,  -628  ,  -628   , -628  ,  -628  ,  -628   , -628 ,   -628  ,  -628  ,  -628   , -628  ,  -628 ,   -628 ,   -628  ,  -628  ,  -628  ,  -628   , -628 ,   -628  ,  -628  ,  -628 ,   -628,    -628 ,   -628  ,  -628 ,   -628 ,   -628   , -628 ,   -628,    -628   , -628 ,   -628 ,   -628  ,  -628 ,   -628   , -628  ,  -628    ,-628 ,   -628,    -628 ,   -628   , -628    ,-628   , -628 ,   -628  ,  -628 ,   -628 ,   -628 ,   -628  ,  -628   , -628 ,   -628  ,  -628  ,  -628  ,  -628 ,   -628  ,  -628  ,  -628  ,  -628  ,  -628   , -628 ,   -628  ,  -628 ,  -628 },
            /*42Xvarescribi*/    {-629, -629,    -629,    3,    -629,    87,    -629,    -629,    -629,    -629,    88,  88,  -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,   -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629 ,   -629,    -629,    -629,    -629,    -629,    -629,    -629 ,   -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629 ,   -629 ,   -629 ,   -629  ,  87 , -629},
            /*43Xvarescribi2*/   {-629, -629,    -629,    3,    -629,    89,    -629,    -629,    -629,    -629,    90,  90,  90,  -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629,    -629 ,   -629,    -629,    -629,    -629,    -629 ,   -629,    -629,    -629,    -629 ,   -629,    -629,    -629,    -629,    -629 ,   -629 ,   -629,    -629 ,   -629 ,   -629 ,   -629 ,   -629 ,   -629  ,  -629  ,  -629  ,  -629  ,  -629  ,  -629 ,   -629 ,   -629  ,  -629,    -629    ,-629  ,  -629    ,-629   , -629  ,  -629    ,-629 ,   -629,    -629  ,  -629 ,   -629   , -629  ,  -629  ,  -629 ,   -629 ,   -629 ,   -629 ,   -629 ,   -629 ,   -629  ,  -629 ,   -629  ,  -629  ,  -629 ,   -629  ,  -629 ,   -629  ,  -629  ,  -629  ,  -629   , -629 ,   -629 ,   -629  ,  -629  ,  -629  ,  -629  ,  -629 ,   -629,    -629  ,  -629   , -629 ,   -629  , -629  ,  -629  ,  -629  ,  -629  ,  -629 ,   89  ,-629},
            /*44Xescribirvar*/   {91,  -630,    -630,    -630 ,   -630,    3 ,   3 ,   91, -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630 ,   -630,    -630 ,   -630,    -630,    -630,    -630,    -630,    -630,    -630 ,   -630,    -630 ,   -630,    -630,    -630,    -630,    -630  ,  -630,    -630  ,  -630  ,  -630,    -630  ,  -630 ,   -630 ,   -630   , -630,    -630  ,  -630 ,   -630   , -630  ,  -630  ,  -630 ,   -630 ,   -630  ,  -630  ,  -630  ,  -630  ,  -630 ,   -630 ,   -630 ,   -630 ,   -630 ,   -630   , -630  ,  -630 ,   -630 ,   -630  ,  -630  ,  -630  ,  -630  ,  -630 ,   -630 ,   -630  ,  -630  ,  -630  ,  -630  ,  -630  ,  -630  ,  -630  ,  -630 ,   -630   , -630  ,  -630 ,   -630   , -630   , -630 ,   -630  ,  -630   , -630  ,  -630  ,  -630   , -630  ,  -630 ,  -630 ,   -630   , -630   , -630 ,   -630   , -630  ,  -630   , -630,    -630  ,  -630  ,  -630   , -630  ,  -630 ,   -630  ,  -630,91 },
            /*45Xescribirvar2*/  {93,  -630,    -630,    -630,    -630,    3,    -630,    93, -630,   -630 ,   -630,    -630,    93, -630 ,   -630 ,   -630 ,   -630,    -630 ,   -630  ,  -630 ,   -630 ,   -630,    -630  ,  -630  ,  -630 ,   -630  ,  -630  ,  -630  ,  -630 ,   -630  ,  -630 ,   -630 ,   -630   , -630 ,   -630  ,  -630  ,  -630 ,   -630,    -630   , -630  ,  -630  ,  -630  ,  -630,    -630  ,  -630 ,   -630 ,   -630  ,  -630 ,   -630,    -630 ,   -630   , -630  ,  -630  ,  -630 ,   -630 ,   -630 ,   -630 ,   -630 ,   -630,    -630,    -630 ,   -630   , -630  ,  -630 ,   -630 ,   -630  ,  -630  ,  -630 ,   -630  ,  -630  ,  -630   , -630   , -630   , -630 ,   -630 ,   -630 ,   -630   , -630,    -630 ,   -630 ,   -630   , -630  ,  -630  ,  -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    -630,    92 ,-630},
            /*46Xmatch2*/        {-621, 94, -621,    -621,    -621,    -621,    -621 ,   -621 ,   -621,   -621 ,   -621,    -621 ,   -621 ,   -621 ,   -621 ,   -621 ,   -621  ,  -621 ,   -621  ,  -621 ,   -621  ,  -621 ,   -621 ,  -621  ,  -621 ,   -621  ,  -621 ,   -621  ,  -621 ,   -621 ,   -621 ,   -621,    -621,   -621   , -621 ,   -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621 ,   -621 ,   -621 ,   -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621 ,   -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621   , -621 ,   -621  ,  -621  ,  -621  ,  -621 ,   -621 ,   -621,    -621 ,   -621  ,  -621  ,  -621 ,   -621 ,   -621 ,   -621  ,  -621  ,  -621 ,   -621 ,   -621   , -621  ,  -621  ,  -621   , -621   , -621  ,  -621  ,  -621   , -621 ,   -621  ,  -621  ,  -621 ,   -621 ,   -621  ,  -621   , -621  ,  -621  ,  -621  ,  -621 ,   -621,   -621 ,   -621 ,   -621 ,   -621 ,   -621 ,   -621  ,  -621  ,  -621},
            /*47Xmatch3*/        { 95, 95, -621,    -621,    -621,    -621,    -621,    -621,    -621,    -621 ,   -621 ,   -621 ,   -621 ,   -621,   -621 ,   -621 ,   -621 ,   95, -621 ,   -621,    -621,    -621 ,   -621 ,   -621  ,  -621,    -621 ,   -621 ,  -621  ,  95, -621 ,   -621  ,  -621 ,   -621 ,   -621  ,  -621 ,   -621 ,   -621  ,  -621  ,  -621  ,  -621 ,   -621  ,  -621  ,  -621 ,   -621  ,  -621 ,   -621 ,   -621,    -621  ,  -621 ,   -621  ,  -621  ,  -621 ,   -621 ,   -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621 ,   -621  ,  -621  ,  -621   , -621  ,  -621   , -621  ,  -621  , -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621 ,  -621   , -621  ,  -621  ,  -621  ,  -621  ,  -621 ,   -621  ,  -621 ,   -621  ,  -621 ,   -621  ,  -621  ,  -621  ,  -621  ,  -621  ,  -621 ,   -621  ,  -621 ,   -621 ,   -621  ,  -621 ,   -621 ,   -621 ,   -621  ,  -621   , -621  ,  -621 ,   -621},
            /*48Xmutable*/       { -631,    -631,    -631,    -631,    -631,    -631,   97,    -631 ,   -631 ,   -631 ,   -631  ,  -631,    -631,    3 ,   -631 ,   -631 ,   -631 ,   97 ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631 ,   -631  ,  -631 ,   -631  ,  -631 ,   -631 ,   -631  ,  -631   , -631  ,  -631  ,  -631  ,  -631  ,  97  , -631   , -631  ,  -631  ,  -631  ,  -631  ,  -631 ,   -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631   , -631  ,  -631  ,  -631  ,  -631  ,  -631 ,   96 , -631 ,   -631  ,  -631  ,  -631   , -631  ,  -631  ,  -631  ,  -631 ,   -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631 ,   -631 ,   -631 ,   -631   , -631 ,   -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  ,  -631  , -631  ,  -631 ,   -631  ,  -631  ,  -631 ,   -631  ,  -631  ,  -631  ,  -631 ,   97 , -631},
            /*49Xestructura*/    {-635, -635,    -635,    -635,    -635,    -635,    3,    -635 ,   -635,    -635,    -635,    -635,    -635 ,   -635   , -635 ,   -635 ,   -635 ,   -635 ,   -635,    -635 ,   -635 ,   -635,    -635 ,   -635 ,   -635 ,   -635  ,  -635  ,  -635  ,  -635 ,   -635 ,   -635 ,   -635 ,   -635 ,   -635,    -635 ,   -635 ,   -635  ,  -635 ,  -635,    -635 ,   -635  ,  -635  ,  -635  ,  -635 ,   -635 ,   -635  ,  -635  ,  -635  ,  -635  ,  -635   , -635   , -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  99  ,-635 ,   -635  ,  99 , -635 ,   -635  ,  -635  ,  -635 ,   -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  98 , -635 ,   99  ,-635  ,  -635  ,  -635 , 99  ,  -635   , -635 ,   -635 ,   -635 ,   -635 ,   -635  ,  -635  , -635  ,  -635  ,  -635 ,   -635  ,  -635 ,   -635  ,  -635 ,   -635  ,  -635 ,   -635   , -635  ,  -635   , -635  ,  -635  ,  -635 ,   -635 ,   -635  ,  99  ,  -635 },
            /*50Xestructura2*/   {100,   -635,    -635,    -635,    -635,    -635 ,   -635 ,   -635 ,   -635 ,   -635 ,   100 , 100,  -635 ,   -635 ,   -635   , -635,    -635  ,  -635    ,-635   , -635,    -635   , -635   , -635  ,  -635 ,   -635   , -635  ,  -635  ,  -635  ,  -635  ,  -635 ,   -635   , -635  ,  -635  ,  -635  ,  -635 ,   -635 ,   -635 ,   -635 ,   -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  -635 ,   -635  ,  -635 ,   -635 ,   -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  -635 ,   -635  ,  -635 ,   -635  ,  -635  ,  -635  ,  -635  ,  -635   , -635  ,  -635  ,  -635  ,  -635  ,  -635  ,  -635 ,   100 , -635 ,   -635 ,   -635  ,  -635  ,  -635  ,  -635 ,   -635  ,  -635  ,  -635  ,  -635  ,  -635 ,   -635  ,  -635  ,  -635 ,  -635 ,   -635 ,   -635  ,  -635   , -635   , -635   , -635  ,  -635 ,   -635 ,   -635   , -635 ,   -635   , -635   , -635 ,  -635  ,  -635  ,  -635  ,  -635 },
            /*51Xestrucsente*/   {101,  -632,    -632,    -632,    -632,    -632,    -632,    -632 ,   -632  ,  -632 ,   -632 ,   -632 ,   -632   , -632 ,   -632  ,  -632  ,  -632 ,   -632  ,  -632  ,  -632 ,   -632 ,   -632  ,  -632  ,  -632   , -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  101 , -632 ,   -632 ,   -632 ,   -632  ,  -632  ,  -632 ,   -632 ,   -632  ,  -632 ,   -632  ,  -632  ,  -632,    -632   , -632  ,  -632  ,  -632   , -632   , -632   , -632   , -632  ,  -632  ,  -632   , -632  ,  -632  ,  -632 ,   -632  ,  -632 ,   -632  ,  -632  ,  -632  ,  -632  ,  -632   , -632 ,  -632  ,  101 , -632  ,  -632  ,  -632   , -632 ,   -632  ,  -632  ,  -632 ,   -632  ,  -632  ,  -632  ,  -632 ,  -632  ,  -632  ,  -632  ,  -632  ,  -632 ,   -632 ,   -632   , -632 ,   -632 ,   -632 ,   -632 ,   -632,    -632  ,  -632 ,   101  ,-632,    -632 ,   -632,    -632 ,   -632  ,  -632},
            /*52Xestructipo*/    { 107, -633,    -633,    -633,    -633,    -633,    -633,    -633,    -633 ,   -633,    -633 ,   -633 ,   -633  ,  -633 ,   -633 ,   -633 ,   -633,    -633 ,   -633 ,   -633  ,  -633  ,  -633  ,  -633  , -633  ,  -633 ,   -633 ,   -633   , -633 ,   -633  ,  -633  ,  -633  ,  -633   , -633   , -633   , -633   , -633  ,  102 , -633 ,   -633  ,  -633   , -633  ,  -633  ,  -633  ,  -633   , -633 ,   -633   , -633  ,  -633  ,  -633  ,  -633 ,   -633   , -633   , -633   , -633  ,  -633  ,  -633  ,  -633   , -633 ,   -633  ,  -633 ,   -633 ,   -633  ,  -633 ,   -633 ,   -633   , -633   , -633   , -633 ,  -633   , -633 ,   -633 ,  -633  ,  -633   , -633   , -633  ,  -633  ,  -633  ,  -633  ,  -633 ,   -633 ,   -633 ,   -633 ,   -633   , -633  ,  -633  ,  -633  ,  -633 ,  -633 ,   -633  ,  -633  ,  -633   , -633 ,   -633   , -633  ,  -633  ,  -633 ,   -633  ,  102 , 103, 104 , 105 , 106 , 108, -633},
            /*53Xestrucsente2*/  {110  , -632  ,  -632 ,   -632   , -632  ,  -632  ,  -632  ,  -632 ,   -632  ,  -632  ,  -632 ,   -632 ,   110 , -632 ,   -632  ,  -632 ,   -632 ,   -632 ,   -632,    -632 ,   -632  ,  -632 ,   -632 ,   -632,    -632 ,  -632 ,   -632  ,  -632   , -632  ,  -632  ,  -632 ,   -632  ,  -632  ,  -632  ,  -632  ,  -632 ,   110 , -632 ,   -632  ,  -632  ,  -632 ,   -632 ,   -632   , -632 ,   -632  , -632  ,  -632   , -632  ,  -632  , -632  ,  -632 ,   -632  ,  -632   , -632  ,  -632 ,   -632   , -632  ,  -632   , -632  ,  -632  ,  -632  ,  -632  ,  -632   , -632  ,  -632 ,  -632  ,  -632 ,   -632 ,   -632   , -632   , -632   , -632   , -632    ,-632  ,  -632 ,   -632 ,   -632 ,   -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632   , -632  ,  -632   , -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632  ,  -632   , -632  ,  -632  ,  -632   , -632  ,  -632  ,  -632   , -632    ,-632 ,   109 , -632 },
            /*54Xtrait0*/        {-634, -634,    -634 ,   -634  ,  -634 ,   -634 ,   3,    -634 ,   -634 ,   -634  ,  -634  ,  -634  ,  -634  ,  -634 ,   -634 ,  -634  ,  -634  ,  -634  ,  -634,    -634 ,   -634 ,   -634  ,  -634 ,   -634 ,   -634 ,   -634   , -634   , -634   , -634  ,  -634  ,  -634 ,   -634  ,  -634 ,   -634  ,  -634  ,  -634   , -634  ,  -634  ,  -634   , -634 ,   -634 ,   -634  ,  -634 ,   -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634 ,   111 ,-634   , -634  ,  111 ,-634  ,  -634  ,  -634   , -634  ,  -634  ,  -634 ,   -634 ,   -634   , -634   , -634   , -634 ,   111 ,-634 ,   112 ,-634  ,  -634 ,   111 ,-634   , -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634   , -634  ,  -634 ,   -634  ,  -634  ,  -634   , -634  ,  -634  ,  -634  ,  -634   , -634 ,   -634  ,  -634  ,  -634  , -634   , -634   , -634   , 111,  -634},
            /*55Xtrait*/         {113 , -634  ,  -634  ,  -634  ,  -634  ,  -634 ,   -634   , -634  ,  -634  ,  -634  ,  113 ,113,-634 ,   -634 ,   -634 ,   -634  ,  -634  , -634  ,  -634  ,  -634  ,  -634  ,  -634 ,   -634 ,   -634 ,   -634 ,   -634  ,  -634  ,  -634  ,  -634  ,  -634 ,   -634  ,  -634  ,  -634  ,  -634   , -634  ,  -634  ,  -634   , -634   , -634 ,   -634   , -634  ,  -634  ,  -634  ,  -634 ,   -634  ,  -634  ,  -634 ,   -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634 ,   113 ,-634 ,   -634 ,   -634  ,  -634  ,  -634 ,   -634  ,  -634  ,  -634   , -634  ,  -634   , -634 ,   -634   , -634 ,   -634 ,   -634  ,  -634,    113, -634 ,   -634  ,  -634   , -634,    -634  ,  -634  ,  -634  ,  -634 ,   -634 ,   -634  ,  -634  ,  -634 ,   -634,   -634  ,  -634 ,   -634   , -634 ,  -634  ,  -634  ,  -634  ,  -634  ,  -634  ,  -634   , -634   , -634  ,  -634  ,  -634  ,  -634  ,  -634, -634 },
            /*56Xidtrait*/       {114,  -636   , -636 ,   -636 ,   -636  ,  -636 ,   -636   , -636 ,   -636  ,  -636,    -636  ,  -636 ,   -636  ,  -636  ,  -636  ,  -636 ,   -636  ,  -636 ,  -636   , -636  ,  -636 ,   -636  ,  -636  ,  -636  ,  -636   , -636   , -636  ,  -636  ,  -636  ,  -636  ,  -636   , -636  ,  -636  ,  -636 ,   -636  ,  -636 ,   -636  ,  -636  ,  -636  ,  -636  ,  -636  ,  -636  ,  -636  ,  -636  ,  -636  ,  -636   , -636   , -636  ,  -636  ,  -636   , -636  ,  -636  ,  -636  ,  -636   , -636  ,  -636 ,   -636  ,  -636  ,  -636   , -636  ,  -636  ,  -636   , -636  ,  -636  ,  -636   , -636   , -636  ,  -636  ,  -636   , -636  ,  -636   , -636  ,  -636  ,  -636 ,  -636   , -636   , -636   , -636 ,   -636   , -636,    -636,    -636  ,  -636   , -636  ,  -636  ,  -636   , -636  ,  -636  ,  -636  ,  -636  ,  -636  ,  -636  ,  -636 ,   -636 ,   -636 ,   -636  ,  -636  ,  -636 ,   -636 ,   -636  ,  -636  ,  -636  ,  -636 ,   -636 },
            /*57Xtraitherencia*/ {116,  -638 ,   -638 ,  -638 ,  -638 ,   -638 ,   -638 ,   -638 ,   -638  ,  -638 ,   -638  ,  -638  ,  -638 ,   -638  ,  -638  ,  -638   , -638  ,  -638  ,  -638 ,   -638 ,   -638 ,   -638   , -638 ,   -638 ,   -638 ,   -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  115 ,-638  ,  -638  ,  -638  ,  -638  ,  -638 ,   -638 ,   -638 ,   -638 ,   -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638 ,   -638   , -638  ,  -638  ,  -638 ,  -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638   , 116  ,  -638  ,  -638  ,  -638 ,  -638 ,   -638 ,   -638 ,   -638  ,  -638   , -638   , -638  ,  -638 ,   -638 ,   -638  ,  -638 ,   -638,    -638  ,  -638  ,  -638 ,   -638  ,  -638   , -638  ,  -638  ,  -638  ,  -638  ,  -638   , -638  ,  -638 ,   -638 ,   -638  ,  -638  ,  -638  ,  -638  ,  -638    ,-638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638 ,-638 },
            /*58Xfunciontrait*/   {-637,    -637 ,   -637  ,  -637  ,  -637 ,   -637  ,  -637 ,   -637  ,  -637,    -637 ,   -637  ,  109    ,-637 ,   -637  ,  -637 ,   -637 ,   -637 ,   -637  ,  -637 ,   -637  ,  -637 ,   -637 ,   -637  ,  -637  ,  -637 ,   -637  ,  -637 ,   -637 ,   -637   , -637,    -637 ,   -637 ,   -637  ,  -637   , -637 ,   -637  ,  -637  ,  -637 ,   -637 ,   -637 ,   -637 ,   -637 ,   -637,    -637 ,   -637 ,   -637 ,   -637 ,   -637 ,   -637 ,   -637 ,   -637 ,   -637 ,   -637 ,   -637 ,   -637 ,   -637  ,  117 ,-637  ,  -637  ,  -637  ,  -637  ,  -637   , -637  ,  -637 ,   -637  ,  -637  ,  -637  ,  -637 ,   -637 ,   -637  ,  -637   , -637  ,  -637  ,  -637   , -637   , -637  ,  -637  ,  -637  ,  -637  ,  -637 ,   -637  ,  -637   , -637  ,  -637   , -637  ,  -637   , -637 ,   -637  ,  -637  ,  -637  ,  -637  ,  -637   , -637 ,   -637 ,   -637  ,  -637   , -637   , -637  ,  -637  ,  -637   , -637   , -637 ,   -637   , -637 },
            /*59Xfunciontrait2*/   {118 ,   -639  ,  -639 ,   -639  ,  -639  ,  -639  ,  118, -639  ,  -639  ,  -639 ,   -639 ,   -639  ,  -639 ,   -639 ,   -639  ,  -639  ,  -639  ,  -639 ,   -639 ,   -639   , -639   , -639 ,   -639  ,  -639  ,  -639  ,  -639  ,  -639 ,   -639 ,   -639  ,  -639  ,  -639 ,   -639   , -639  ,  -639  ,  -639 ,   -639  ,  -639  ,  -639   , -639  ,  -639  ,  -639  ,  -639   , -639  ,  -639  ,  -639   , -639   , -639  ,  -639  ,  -639  ,  -639  ,  -639   , -639  ,  -639 ,   -639  ,  -639 ,   -639 ,   118, -639  ,  -639 ,   -639   , -639   , -639   , -639 ,   -639  ,  -639   , -639  ,  -639 ,   -639  ,  -639  ,  -639  ,  -639 ,   -639  ,  -639  ,  -639 ,   -639  ,  -639  ,  -639  ,  -639  ,  -639  ,  -639  ,  -639  ,  -639  ,  -639  ,  -639  ,  -639  ,  -639  ,  -639  ,  -639  ,  -639  ,  -639 ,   -639  ,  -639   , -639  ,  -639   , -639  ,  -639  ,  -639   , -639  ,  -639  ,  -639  ,  -639 ,   -639,    -639, -639 },
            /*60Xparatrait2*/      {120,    -640  ,  -640  ,  -640   , -640  ,  -640  ,  -640 ,   -640  ,  -640  ,  -640  ,  -640 ,   -640  ,  120 ,-640 ,   -640  ,  -640 ,   -640   , -640  ,  -640  ,  -640   , -640  ,  -640  ,  -640  ,  -640   , 120 ,-640 ,   -640 ,   -640  ,  -640  ,  -640   , -640  ,  -640 ,   -640 ,   -640  ,  -640  ,  -640,    120, -640  ,  -640   , -640 ,   -640   , -640  ,  -640  ,  -640  ,  -640  ,  -640   , -640  ,  -640 ,   -640   , -640  ,  -640  ,  -640 ,   -640   , -640  ,  -640  ,  -640  ,  -640  ,  -640  ,  -640 ,   -640 ,   -640  ,  -640 ,   -640  ,  -640 ,   -640  ,  -640  ,  -640 ,   -640  ,  -640  ,  -640 ,   -640  ,  -640  ,  -640  ,  -640  ,  -640 ,   -640  ,  -640   , -640 ,   -640   , -640  ,  -640 ,   -640 ,   -640   , -640 ,   -640,    -640  ,  -640  ,  -640  ,  -640  ,  -640 ,   -640  ,  -640  ,  -640 ,   -640 ,   -640 ,   -640 ,   -640  ,  -640  ,  -640  ,  -640 ,   -640 ,   -640 ,   119, -640 },
            /*61Xparatrait*/       { -640,  -640 ,   -640,    -640 ,   121, 121, -640  ,  -640 ,   -640   , -640  ,  -640  ,  -640  ,  -640   , -640  ,  -640  ,  -640  ,  -640   , -640  ,  -640  ,  -640 ,   -640 ,   -640   , -640  ,  -640  ,  -640  ,  -640  ,  -640  ,  -640  ,  -640  ,  -640  ,  -640   , -640 ,   -640  ,  -640  , -640   , -640  ,  -640  ,  -640 ,   -640  ,  -640  ,  -640  ,  121 ,-640  ,  -640  ,  -640  ,  -640    ,-640  ,  -640  ,  -640  ,  -640  ,  -640   , -640   , -640  ,  -640   , -640  ,  -640  ,  -640  ,  -640  ,  -640 ,  -640  ,  -640  ,  -640 ,   -640 ,   -640  ,  -640  ,  -640  ,  -640  ,  -640   , -640  ,  121,-640  ,  -640  ,  -640  ,  -640   , -640 ,   -640  ,  -640  ,  -640   , -640  ,  -640  ,  -640  ,  -640   , -640 ,   -640  ,  -640   , -640 ,   -640  ,  -640  ,  -640  ,  -640  ,  -640   , -640  ,  -640  ,  -640 ,   -640   , -640 ,   -640  ,  121 ,-640  ,  -640  ,  -640  ,  -640  ,  -640 ,-640},
            /*62Xmiembrotrait2*/    {},
            /*63Ximplentos*/       { -642,  -642 ,   -642  ,  -642 ,   -642 ,   -642  ,  3 ,  -642  ,  -642 ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642   ,-642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642   , -642  ,  -642  ,  -642   , -642  ,  -642  ,  -642   , -642  ,  -642   , -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  , -642   , -642  ,  -642   , -642   , -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  124, -642  ,  -642 ,   125 ,-642  ,  -642  ,  -642  ,  -642  ,  -642   , -642  ,  -642 ,   -642  ,  -642  ,  -642   , -642 ,   124, -642 ,   124 ,-642 ,   -642 ,   124, -642 ,  -642  ,  -642  ,  -642  ,  -642  ,  -642   , -642   , -642 ,   -642  ,  -642  ,  -642  ,  -642  ,  -642 ,  -642   , -642  ,  -642  , -642   , -642  ,  -642  ,  -642  ,  -642 ,  -642   , -642 ,   -642   , -642 ,   124 ,   -642},
            /*64Ximpl*/          { -642,    -642  ,  -642  ,  -642 ,   -642  ,  -642 ,   -642 ,   -642 ,   -642 ,   -642  ,  -642  ,  -642 ,  -642  ,  -642  ,  -642  ,  -642  ,  -642   , -642  ,  -642 ,  -642   , -642  ,  -642  ,  -642  ,  -642 ,   -642 ,   -642 ,   -642 ,   -642 ,   -642  ,  -642  ,  -642   , -642 ,   -642 ,   -642 ,   -642  ,  -642  ,  -642 ,   -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642   , -642  ,  -642  ,  -642  ,  -642  ,  -642 ,   -642 ,   -642 ,   -642 ,   -642  ,  -642  ,  -642  ,  -642 ,   -642  ,  -642 ,   -642  ,  126 ,-642  ,  -642  ,  -642   , -642  ,  -642  ,  -642  ,  -642 ,   -642  ,  -642,    -642 ,   -642  ,  -642  ,  -642 ,   -642 ,   -642  ,  -642  ,  -642 ,   -642  ,  -642 ,   -642 ,   -642  ,  -642 ,   -642  ,  -642  ,  -642 ,   -642  ,  -642  ,  -642 ,   -642 ,   -642  ,  -642   , -642   , -642  ,  -642  ,  -642   , -642 ,   -642  ,  -642 ,   -642 ,   -642  ,  -642 ,   -642  ,  -642  ,  -642},
            /*65Ximpltipos*/     {127,  -642,    -642,    -642,    -642 ,   -642   , -642  ,  -642 ,   -642 ,   -642  ,  127, 127 ,-642,    -642  , -642   , -642 ,   -642,    -642  ,  -642  ,  -642  ,  -642  ,  -642 ,   -642 ,   -642 ,  -642 ,   -642 ,   -642,    -642 ,   -642  ,  -642  ,  -642   , -642 ,   -642  ,  -642  ,  -642  ,  -642   , -642   , -642  ,  -642  ,  -642 ,   -642  ,  -642  ,  -642   , -642  ,  -642 ,   -642 ,   -642 ,   -642   , -642   , -642   , -642 ,   -642  ,  -642   , -642 ,   -642  ,  -642  ,  128, 127 ,-642 ,  -642  ,  -642  ,  -642  ,  -642 ,   -642   , -642  ,  -642 ,   -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642 ,   -642  ,  -642  ,  -642  ,  -642  ,  -642   , -642  ,  -642 ,   -642  ,  -642  ,  -642 ,   -642  ,  -642   , -642  ,  -642  ,  -642 ,   -642 ,   -642 ,  -642  , -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642  ,  -642 },
            /*66Xidimpl*/        { 129, -643,    -643  ,  -643  ,  -643  ,  -643   , -643 ,   -643  ,  -643  ,  -643 ,   -643  ,  -643  ,  -643  ,  -643   , -643 ,   -643 ,   -643   , -643  ,  -643  ,  -643  ,  -643 ,   -643  ,  -643  ,  -643  ,  -643 ,   -643  ,  -643  ,  -643   , -643  ,  -643  ,  -643  ,  -643   , -643   , -643  ,  -643  ,  -643  ,  -643 ,   -643 ,   -643 ,   -643  ,  -643  ,  -643  ,  -643  ,  -643  ,  -643 ,   -643  ,  -643 ,   -643 ,   -643   , -643  ,  -643   , -643  ,  -643 ,   -643  ,  -643  ,  -643  ,  -643   , -643 ,   -643  ,  -643  ,  -643  ,  -643  ,  -643  ,  -643   , -643  ,  -643  ,  -643   ,-643  ,  -643  ,  -643  ,  -643  ,  -643   , -643 ,   -643   , -643  ,  -643  ,  -643  , -643  ,  -643  ,  -643  ,  -643  ,  -643   , -643 ,   -643   , -643  ,  -643  ,  -643 ,   -643  ,  -643   , -643  ,  -643  ,  -643   , -643 ,   -643 ,   -643  ,  -643 ,   -643  ,  -643 ,   -643  ,  -643    ,-643  ,  -643  ,  -643  ,  -643},
            /*67Xfuncionesimpl*/ {-644, -644 ,   -644  ,  -644 ,   -644  ,  -644   , -644 ,   -644 ,   -644  ,  -644 ,   -644  ,  3  ,  -644 ,   -644   , -644 ,   -644   , -644  ,  -644  ,  -644   , -644  ,  -644 ,   -644  ,  -644  ,  -644  ,  -644  ,  -644 ,   -644   , -644  ,  -644  ,  -644  ,  -644 ,   -644   , -644  ,  -644  ,  -644 ,   -644   , -644 ,   -644  ,  -644   , -644  ,  -644  ,  -644  ,  -644  ,  -644  ,  -644 ,   -644  ,  -644  , -644  ,  -644  ,  -644   , -644   , -644  ,  -644  ,  -644   , -644  ,  -644 ,   130 ,-644  ,  -644  ,  -644  ,  -644  ,  -644  ,  -644  ,  -644   , -644   , -644  ,  -644  ,  -644  ,  -644   , -644  ,  -644  ,  -644   , -644  ,  -644  ,  -644  ,  -644  ,  -644   , -644  ,  -644  ,  -644 ,   -644  ,  -644  ,  -644 ,   -644  ,  -644  ,  -644  ,  -644  ,  -644  ,  -644  ,  -644  ,  -644   , -644  ,  -644  ,  -644  ,  -644  ,  -644  ,  -644 ,   -644  ,  -644  ,  -644 ,   -644  ,  -644 ,   131 ,-644 },
            /*68Xfuncionesimpl2*/{132,  -644,    -644,    -644 ,   132, 132, -644,    -644 ,   -644,    -644,    132, 132 ,-644 ,   -644,    -644,    -644,    -644 ,   -644,    -644,    -644,    -644 ,   -644 ,   -644,    -644,    -644 ,   -644 ,   -644  ,  -644   , -644  ,  -644  ,  -644 ,   -644 ,   -644 ,   -644 ,  -644 ,   -644 ,   -644 ,   -644  ,  -644 ,   -644  ,  -644   , -644  ,  -644  ,  -644  ,  -644  ,  -644  ,  -644  ,  -644 ,   -644 ,   -644  ,  -644 ,   -644 ,   -644  ,  -644  ,  -644  ,  -644  ,  132 ,-644  ,  -644  ,  -644  ,  -644  ,  -644  ,  -644 ,   -644 ,   -644 ,   -644   , -644  ,  -644  ,  -644 ,   132 ,-644 ,   -644 ,   -644   , -644   , -644,    -644   , -644  ,  -644  ,  -644   , -644  ,  -644  ,  -644   , -644   , -644   , -644 ,   -644 ,   -644    ,-644   , -644  ,  -644  ,  -644   , -644 ,  -644  ,  -644   , -644 ,   -644  ,  -644  ,  132, -644   , -644  ,  -644  ,  -644  ,  -644   , -644 },
            /*69Ximplobj*/       {-645, -645,   -645 ,   -645 ,   -645 ,   -645,   -645 ,   139, -645,    -645  ,  -645 ,   -645 ,   -645  ,  -645,    -645,    -645  ,  -645 ,   -645 ,   -645  ,  -645   , -645 ,   -645  ,  -645   , -645  ,  -645  ,  -645   , -645  ,  -645   , -645 ,  -645 ,   -645  ,  -645 ,   -645  ,  -645  , -645   , -645   , -645   , -645  ,  -645  ,  -645   , -645 ,   -645  ,  -645 ,   -645  ,  -645 ,  -645   , -645  ,  -645 ,   -645  ,  -645  ,  -645  ,  -645 ,   -645 ,   -645  ,  -645 ,   -645 ,   -645 ,   -645 ,   140 ,-645  ,  -645 ,   -645  ,  -645  ,  -645  , -645  ,  -645  ,  -645  ,  -645  ,  -645,    139 ,-645  ,  -645  ,  -645    ,-645  ,  -645   , -645 ,   -645 ,   -645 ,   -645   , -645   , -645  , -645  ,  -645  ,  -645   , -645  ,  -645  ,  -645   , -645  ,  -645  ,  -645 ,  -645  ,  -645   , -645 ,   -645  ,  -645  ,  -645  ,  -645  ,  -645   , -645   , -645   , -645 ,   -645 ,   -645 ,   -645},
            /*70Xtraitherencia2*/ {136, -638,    -638,    -638  ,  135 ,  -638  ,  -638  ,  -638 ,   -638    ,-638  ,  110  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638    ,-638  ,  -638  ,  -638  ,  -638,    -638   , -638   , -638  ,  -638   , -638   , -638  ,  -638 ,   -638  ,  -638  ,  -638,    -638   , -638   , -638  ,  -638   , -638  ,  -638  ,  -638 ,   -638   , -638,   -638  ,  -638   , -638  ,  -638  ,  -638 ,   -638  ,  -638  ,  -638  ,  -638  ,  -638  ,  -638   , -638   , -638  ,  -638   , -638  ,  -638 ,   -638  ,  -638   , -638  , -638    ,-638  ,  -638  ,  -638    ,-638   , -638,    -638 ,   -638   , -638  ,  -638  ,  -638 ,   -638   , -638  ,  -638  , -638   , -638  ,  -638  ,  -638  ,  -638   , -638 ,   -638   , -638   , -638 ,  -638   , -638  ,  -638 ,  -638  ,  -638  ,  -638 ,  -638  ,  -638  ,  -638 ,   -638  ,  -638   , -638,    -638  ,  -638  ,  -638 ,   -638   , -638 ,   -638    ,-638  ,  -638 ,   -638  ,  -638, -638 },
            /*71Xmiembrotrait*/  {-641, -641 ,   -641  ,  -641   , -641 ,   -641 ,   122, -641   , -641   , -641 ,   123, 123 ,-641  ,  -641  ,  -641   , -641  ,  -641  ,  -641 ,   -641  ,  -641   , -641  ,  -641   , -641  ,  -641  ,  -641   , -641 ,  -641   , -641  ,  -641   , -641    ,-641   , -641 ,   -641  ,  -641   , -641 ,   -641  ,  -641   , -641  ,  -641  ,  -641  ,  -641   , -641  , -641  ,  -641  ,  -641   , -641  ,  -641   , -641  , -641  ,  -641  ,  -641   , -641 ,   -641  ,  -641   , -641  ,  -641 ,   -641   , -641  ,  -641  ,  -641  ,  -641  ,  123 ,-641  ,  -641  ,  -641  ,  -641  ,  -641 ,   -641  ,  -641  ,  -641   , -641   , -641   , -641   , -641  ,  -641  ,  -641  ,  -641  ,  -641  ,  -641  ,  -641   , -641 ,   -641  ,  -641  ,  -641  ,  -641 ,   -641 ,   -641   , -641 ,   -641 ,  -641   , -641  ,  -641 ,   -641  ,  -641   , -641  ,  -641 ,   -641  ,  -641   , -641   , -641    ,-641  ,  -641  ,  -641  ,  -641 },
            /*72invocarmetodo*/ { 137,-646  ,  -646 ,   -646,    137, 137, 137,137, -646,    -646  ,  -646  ,  -646  ,  -646,    -646 ,   -646 ,   -646 ,   -646  ,  -646  ,  -646  ,  -646   , -646  ,  -646  ,  -646   , -646   , -646 ,   -646 ,   -646  ,  -646   , -646  ,  -646  ,  -646   , -646   , -646  ,  -646  ,  -646  ,  -646 ,   -646  ,  -646 ,   -646   , -646   , -646  ,  -646  ,  -646 ,   -646  ,  -646   , -646  , -646   , -646  ,  -646  ,  -646  ,  -646   , -646 ,   -646  , -646  ,  -646   , -646 ,   -646   , -646  ,  -646  ,  -646   , -646   , -646  ,  -646   , -646  ,  -646  ,  -646  ,  -646   , -646  ,  -646  , -646  ,  -646  ,  -646   , -646  ,  -646  ,  -646  ,  -646  ,  -646  ,  -646  ,  -646   , -646  ,  -646  ,  -646   , -646  ,  -646  ,  -646 ,   -646  ,  -646  ,  -646  ,  -646  ,  -646 ,   -646   , -646    ,-646   , -646 ,   -646  ,  -646   , -646   , -646  ,  -646 ,   -646 ,   -646 ,   -646 ,   -646  ,  -646},
            /*73Ximplobj2*/      {134 , -645 ,   -645,   -645  ,  134, 134, 134, 134, -645,    -645,    -645 ,   -645  ,  -645  ,  -645   , -645 ,   -645 ,   -645  ,  -645  ,  -645  ,  -645  ,  -645  ,  -645   , -645 ,   -645   , -645 ,   -645 ,   -645 ,   -645   , -645 ,   -645  ,  -645  , -645   , -645 ,   -645  ,  -645 ,   -645   , -645   , -645  ,  -645   , -645 ,   -645 ,   -645  ,  -645  ,  -645  ,  -645  ,  -645  ,  -645  ,  -645 ,   -645,    -645  ,  -645  ,  -645  ,  -645 ,   -645 ,   -645   , -645  ,  -645  ,  -645  ,  -645   , -645 ,   -645 ,   -645   , -645   , -645   , -645  ,  -645  ,  -645  ,  -645  ,  -645  ,  -645 ,   -645 ,  -645   , -645  ,  -645  ,  -645  ,  -645   , -645 ,   -645  ,  -645  ,  -645  ,  -645  ,  -645  ,  -645  ,  -645  ,  -645 ,  -645   , -645   , -645  ,  -645   , -645  ,  -645   , -645   , -645   , -645  ,  -645  ,  -645  ,  -645   , -645  ,  -645 ,   -645  ,  -645  ,  -645  ,  -645  ,  -645 },
            /*74XLib2*/         {5,  -601 ,   -601 ,   -601 ,   -601 ,   -601  ,  5  , -601 ,   -601  ,  -601   , -601    ,-601    ,-601   , -601   , -601    ,-601  ,  -601,    -601 ,   -601    ,-601 ,   -601  ,  -601  ,  -601  ,  -601  ,  -601  ,  -601    ,-601  ,  -601  ,  -601   , -601 ,   -601  ,  -601 ,   -601,    -601 ,   -601 ,   -601 ,   -601  ,  5   ,-601 ,   -601 ,   -601    ,-601   , -601  ,  -601   , -601 ,   -601 ,   -601 ,   -601 ,   -601 ,  -601    ,-601 ,   -601    ,-601   , -601   , -601  ,  -601    ,3  , -601    ,-601 ,   -601,    -601 ,   -601   , -601   , -601  ,  -601  ,  -601 ,   -601 ,   -601  ,  -601  ,  -601   , -601  ,  -601  ,  -601  ,  -601  ,  -601  ,  -601 ,   4  , -601 ,   -601  ,  -601  ,  5 ,  -601    ,-601  ,  -601  ,  -601   ,-601  ,  -601   , -601   , -601  ,  -601,    -601 ,   -601   , -601  ,  -601    ,-601    ,-601   ,-601    ,-601   , -601 ,   -601 ,   -601  ,  -601  ,  3  , -601 },
            /*75XAsigVari*/      {143,   -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608 ,   -608,   -608 ,   -608,    -608,    143,    -608,    -608 ,   -608,    -608 ,   -608 ,   -608,    -608 ,   -608 ,   -608 ,   -608 ,   -608 ,   -608  ,  -608,    -608,    -608,    -608,    -608 ,   -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,  -608 ,   -608,    -608,    -608,    143,  -608,    -608,    -608 ,   -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,   -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    -608,    143,    143,    143,    143,    143,    -608,    -608},

        };

        public int[,] RepositorioReglas = new int[,]
        {
            /*0S*/           {1001,-202,0,0,0,0,0,0,0,0,0},
            /*1Programa*/    {1065,1049,1050,1004,1002,-202,0,0,0,0,0},
            /*2librerias*/   {-200,-202,0,0,0,0,0,0,0,0,0},
            /*3librerias*/   {1003,-70,-202,0,0,0,0,0,0,0,0},
            /*4lib1*/        {1074,-7,-1,-39,-74,-202,0,0,0,0,0},
            /*5funciones*/   {1004,1005,-202,0,0,0,0,0,0,0,0},
            /*6funciones*/   {-200,-202,0,0,0,0,0,0,0,0,0},
            /*7funcion1*/    {-12,1010,-11,-6,1020,-5,1006,-49,-202,0,0},
            /*8funcion2*/    {-97,-202,0,0,0,0,0,0,0,0,0},
            /*9funcion2*/    {-1,-202,0,0,0,0,0,0,0,0,0},
            /*10parametros*/  {1008,-1,-202,0,0,0,0,0,0,0,0},
            /*11parametros*/  {-200,-202,0,0,0,0,0,0,0,0,0},
            /*12parametros*/  {-63,-202,0,0,0,0,0,0,0,0,0},
            /*13parametros1*/ {1053,-202,0,0,0,0,0,0,0,0,0},
            /*14factor*/      {-1,-202,0,0,0,0,0,0,0,0,0},
            /*15factor*/      {-4,-202,0,0,0,0,0,0,0,0,0},
            /*16factor*/      {-2,-202,0,0,0,0,0,0,0,0,0},
            /*17factor*/      {-3,-202,0,0,0,0,0,0,0,0,0},
            /*18miembros*/    {1010,1011,-202,0,0,0,0,0,0,0,0},
            /*19miembros*/    {-200,-202,0,0,0,0,0,0,0,0,0},
            /*20miembros2*/   {1012,-202,0,0,0,0,0,0,0,0,0},
            /*21miembros3*/   {1013,-202,0,0,0,0,0,0,0,0,0},
            /*22miembros3*/   {1014,-202,0,0,0,0,0,0,0,0,0},
            /*23miembros3*/   {1015,-202,0,0,0,0,0,0,0,0,0},
            /*24miembros3*/   {1016,-202,0,0,0,0,0,0,0,0,0},
            /*25miembros3*/   {1072,-202,0,0,0,0,0,0,0,0,0},
            /*26asignacionX*/  {-7,1017,-19,-202,0,0,0,0,0,0,0},
            /*27asignacionX*/  {-7,-12,1020,-11,-202,0,0,0,0,0,0},
            /*28asignacionX*/  {-7,-6,-5,-1,-8,-63,-19,-202,0,0,0},
            /*29sentenciasX*/  {1014,1022,-202,0,0,0,0,0,0,0,0},
            /*30sentenciasX*/  {-200,-202,0,0,0,0,0,0,0,0,0},
            /*31declaracionX*/ {-7,1013,1048,1075,-1,-54,-202,0,0,0,0},
            /*32invocaestrucX*/{-7,-6,-5,-1,-8,-1,-202,0,0,0,0},
            /*33expX*/         {1018,1009,-202,0,0,0,0,0,0,0,0},
            /*34terminoX*/     {-200,-202,0,0,0,0,0,0,0,0,0},
            /*35terminoX*/     {1017,1019,-202,0,0,0,0,0,0,0,0},
            /*36operaX*/       {-15,-202,0,0,0,0,0,0,0,0,0},
            /*37operaX*/       {-16,-202,0,0,0,0,0,0,0,0,0},
            /*38operaX*/       {-17,-202,0,0,0,0,0,0,0,0,0},
            /*39operaX*/       {-18,-202,0,0,0,0,0,0,0,0,0},
            /*40asigestrucXXX*/  {1021,1053,-38,-1,-202,0,0,0,0,0,0},
            /*41asigestruc2X*/ {-200,-202,0,0,0,0,0,0,0,0,0},
            /*42asigestruc2X*/ {1021,1053,-38,-1,-13,-202,0,0,0,0,0},
            /*43sentencias ño sirveXd*/  {1014,1022,-202,0,0,0,0,0,0,0,0},
            /*44sentencias ño sirveXd*/  {-200,-202,0,0,0,0,0,0,0,0,0},
            /*45sentenciaX*/   {1023,-202,0,0,0,0,0,0,0,0,0},
            /*46sentenciax*/   {1024,-202,0,0,0,0,0,0,0,0,0},
            /*47sentenciax*/   {1025,-202,0,0,0,0,0,0,0,0,0},
            /*48sentenciax*/   {1026,-202,0,0,0,0,0,0,0,0,0},
            /*49sentenciax*/   {1027,-202,0,0,0,0,0,0,0,0,0},
            /*50sentenciax*/   {1028,-202,0,0,0,0,0,0,0,0,0},
            /*51sentenciax*/   {1013,-202,0,0,0,0,0,0,0,0,0},
            /*52sentenciax*/   {1015,-202,0,0,0,0,0,0,0,0,0},
            /*53sentenciaX*/   {1029,-202,0,0,0,0,0,0,0,0,0},
            /*54ifX*/          {1035,-12,1010,-11,1030,-1,-51,-202,0,0,0},
            /*55loopx*/        {-12,-41,1014,-11,-55,-202,0,0,0,0,0},
            /*56forX*/         {-12,1010,-11,-2, -39,-2,-53,-1,-50,-202,0},
            /*57whileX*/       {-12,1010,-11,1030,-1,-72,-202,0,0,0,0},
            /*58leerX*/        {-7,-6,-5,-88,-39,-95,-19,1040,-202,0,0},
            /*59escribirX*/    {-7,-6,1044,-4,-5,-99,-202,0,0,0,0},
            /*60matchX*/       {-12,1046,-11,-1,-56,-202,0,0,0,0,0},
            /*61condicionalX*/ {1032,1031,-202,0,0,0,0,0,0,0,0},
            /*62factorcondX*/  {-68,-202,0,0,0,0,0,0,0,0,0},
            /*63factorcondX*/  {-48,-202,0,0,0,0,0,0,0,0,0},
            /*64factorcondX*/  {1017,1033,-202,0,0,0,0,0,0,0,0},
            /*65terminocondX*/ {1030,1034,-202,0,0,0,0,0,0,0,0},
            /*66oprelX*/       {-30,-202,0,0,0,0,0,0,0,0,0},
            /*67oprelX*/       {-29,-202,0,0,0,0,0,0,0,0,0},
            /*68oprelX*/       {-31,-202,0,0,0,0,0,0,0,0,0},
            /*69oprelX*/       {-32,-202,0,0,0,0,0,0,0,0,0},
            /*70oprelX*/       {-34,-202,0,0,0,0,0,0,0,0,0},
            /*71oprelX*/       {-33,-202,0,0,0,0,0,0,0,0,0},
            /*72oplogX*/       {-24,-202,0,0,0,0,0,0,0,0,0},
            /*73oplogX*/       {-23,-202,0,0,0,0,0,0,0,0,0},
            /*74elsex*/        {-200,-202,0,0,0,0,0,0,0,0,0},
            /*75elsex*/        {1036,-45,-202,0,0,0,0,0,0,0,0},
            /*76else1X*/       {-12,-41,1014,-11,-55,-202,0,0,0,0,0},
            /*77else1X*/       {1023,-202,0,0,0,0,0,0,0,0,0},
            /*78forcondX*/     {-53,-202,0,0,0,0,0,0,0,0,0},
            /*79forcond2X*/    {1009,1039,-8,-8,1009,-202,0,0,0,0,0},
            /*80forigualX*/    {-200,-202,0,0,0,0,0,0,0,0,0},
            /*81forigualX*/    {-19,-202,0,0,0,0,0,0,0,0,0},
            /*82leervarX*/     {-1,-202,0,0,0,0,0,0,0,0,0},
            /*83leervarX*/    {1015,-202,0,0,0,0,0,0,0,0,0},
            /*84escribir ño sirve*/    {1044,-6,1041,-5,-99,-202,0,0,0,0,0},
            /*85escribircadeX*/{-4,1042,-202,0,0,0,0,0,0,0,0},
            /*86varescribiX*/  {-200,-202,0,0,0,0,0,0,0,0,0},
            /*87varescribiX*/  {1043,-12,-11,-13,-202,0,0,0,0,0,0},
            /*88varescribi2X*/ {-200,-202,0,0,0,0,0,0,0,0,0},
            /*89varescribi2X*/ {1043,-12,-11,-13,-202,0,0,0,0,0,0},
            /*90escribirvarX*/ {1045,-1,-15,-202,0,0,0,0,0,0,0},
            /*91escribirvar2X*/{-200,-202,0,0,0,0,0,0,0,0,0},
            /*92escribirvar2X*/{1045,-1,-15,-13,-202,0,0,0,0,0,0},
            /*93match2X*/      {1046,1047,-202,0,0,0,0,0,0,0,0},
            /*94match3X*/      {-12,1010,-11,-90,-2,-202,0,0,0,0,0},
            /*95mutableX*/     {-59,-202,0,0,0,0,0,0,0,0,0},
            /*96mutableX*/     {-200,-202,0,0,0,0,0,0,0,0,0},
            /*97estructuraX*/  {1050,1051,-202,0,0,0,0,0,0,0,0},
            /*98estructuraX*/  {-200,-202,0,0,0,0,0,0,0,0,0},
            /*99estructura2X*/{-12,1052,-11,-1,-65,-202,0,0,0,0,0},
            /*100estrucsenteX*/{1054,1053,-38,-1,-202,0,0,0,0,0,0},
            /*101estructipoX*/{-100,-202,0,0,0,0,0,0,0,0,0},
            /*102estructipoX*/{-101,-202,0,0,0,0,0,0,0,0,0},
            /*103estructipoX*/{-102,-202,0,0,0,0,0,0,0,0,0},
            /*104estructipoX*/{-103,-202,0,0,0,0,0,0,0,0,0},
            /*105estructipoX*/{-104,-202,0,0,0,0,0,0,0,0,0},
            /*106estructipoX*/{-1,-38,-202,0,0,0,0,0,0,0,0},
            /*107estructipoX*/{-200,-202,0,0,0,0,0,0,0,0,0},
            /*108estrucsente2X*/{-200,-202,0,0,0,0,0,0,0,0,0},
            /*109estrucsente2X*/{1054,1053,-1,-13,-202,0,0,0,0,0,0},
            /*110trait0X*/{-200,-202,0,0,0,0,0,0,0,0,0},
            /*111trait0X*/{1049,1055,-202,0,0,0,0,0,0,0,0},
            /*112traitX*/{-12,1058,-11,1057,1056,-67,-202,0,0,0,0},
            /*113idtraitX*/{-1,-202,0,0,0,0,0,0,0,0,0},
            /*114traitherenciaX*/{-200,-202,0,0,0,0,0,0,0,0,0},
            /*115traitherenciaX*/{-38,-1,-202,0,0,0,0,0,0,0,0},
            /*116funciontraitX*/{1058,1059,-202,0,0,0,0,0,0,0,0},
            /*117funciontrait2X*/{1063,1060,-1,-49,-202,0,0,0,0,0,0},
            /*118paratriat2X*/{-200,-202,0,0,0,0,0,0,0,0,0},
            /*119paratrait2X*/{1062,1009,-26,-38,-1,-13,-202,0,0,0,0},
            /*120paratriatX*/{1053,-90,-6,1062,-63,-5,1061,-202,0,0,0},
            /*121miembrotraitX*/{-7,-202,0,0,0,0,0,0,0,0,0},
            /*122miembrotraitX*/{-12,1064,-11,-202,0,0,0,0,0,0,0},
            /*123implementosX*/{-200,-202,0,0,0,0,0,0,0,0,0},
            /*124implementosX*/{1065,1066,-202,0,0,0,0,0,0,0,0},
            /*125implX*/{-12,1004,-11,-1,-52,-202,0,0,0,0,0},
            /*126impltiposX*/{-12,-11,1068,-50,1056,-202,0,0,0,0,0},
            /*127impltiposX*/{-12,1069,-11,1068,-202,0,0,0,0,0,0},
            /*128idimplX*/{-1,-202,0,0,0,0,0,0,0,0,0},
            /*129funcionesimplX*/{1069,1070,-202,0,0,0,0,0,0,0,0},
            /*130funcionesimplX*/{-200,0,0,0,0,0,0,0,0,0,0},
            /*131funcionesimpl2X*/{-12,1071,-11,1053,-6,-63,-5,-1,-49,-202,0},
            /*132implobj2X*/{-7,-6,-5,1068,-8,-202,0,0,0,0,0},
            /*133implobj2X*/{-7,-6,-5,-1,-8,-1,-202,0,0,0,0},
            /*134traitherencia2X*/{-200,-202,0,0,0,0,0,0,0,0,0},
            /*135traitherencia2X*/{-30,-1,-38,-1,-29,-202,0,0,0,0,0},
            /*136miembrotrait2X*/{1015,-202,0,0,0,0,0,0,0,0,0},
            /*137invocarmetodoX*/{-7,-6,-5,-1,-8,-63,-19,-202,0,0,0},
            /*138implobjX*/{1073,-63,-202,0,0,0,0,0,0,0,0},
            /*139implobjX*/{1022,-202,0,0,0,0,0,0,0,0,0},
            /*140lib2*/{-200,-202,0,0,0,0,0,0,0,0,0},
            /*141lib2*/{1002,-202,0,0,0,0,0,0,0,0,0},
            /*142AsignacionVariX*/{1053,-38,-202,0,0,0,0,0,0,0,0},
            /*143ExpParente*/{1017,1018,-6,1018,1009,-5,-202,0,0,0,0},

        };

        public int[,] Suma = new int[,]
        {
            //        | 0 |  1 | 2 |
            //        |Int|Real|Str|                 
            /*0 Int */ {-2 ,-3 , 10},
            /*1 Real*/ {-3 , -3 , 10},
            /*2 Str */ {10, 10 , 10},


        };
        public int[,] Resta = new int[,]
        {
            //        | 0 |  1 | 2 |
            //        |Int|Real|Str|                 
            /*0 Int */ {-2, -3 , 10},
            /*1 Real*/ {-3, -3 , 10},
            /*2 Str */ {10, 10 , 10},


        };
        public int[,] Multi = new int[,]
        {
            //        | 0 |  1 | 2 |
            //        |Int|Real|Str|                 
            /*0 Int */ {-2, -3 , 10},
            /*1 Real*/ {-3 , -3 , 10},
            /*2 Str */ {10, 10 , 10},

        };
        public int[,] Divi = new int[,]
        {
            //        | 0 |  1 | 2 |
            //        |Int|Real|Str|                 
            /*0 Int */ {-3, -3 , 10},
            /*1 Real*/ {-3, -3 , 10},
            /*2 Str */ {10, 10 , 10},

        };


        public Sintactico(List<Token> listaTokenLexico)
        {

            listaError = new List<Error>();
            listaVariables = new List<Varia>();
            ListaPolaca = new List<string>();
            listaTokens = listaTokenLexico;
            listaTokens.Add(new Token() { Lexema = "@", Linea = 0, TipoToken = TipoToken.Cadena, ValorToken = -201 });
            
            ListaOpera = new List<string>();
            ListaTipos = new List<int>();
            listasintactico[0] = -201;
            listasintactico[1] = 1000;

            intentosRecuperar = 0;
            tipoRecuperacion = TipoRecuperacion.Ninguna;




            EjecutadorSintactico(listaTokens);

        }

        public void EjecutadorSintactico(List<Token> listaTokens)
        {
            int reglon, columna, regla = 0;

            do
            {
                if (listasintactico[puntosintactico] < 0)
                {



                    if (listasintactico[puntosintactico] == -200)
                    {
                        listasintactico[puntosintactico] = 0;
                        puntosintactico--;
                    }

                    else if (listasintactico[puntosintactico] == listaTokens[puntolexico].ValorToken)
                    {
                        if (listasintactico[puntosintactico] == -201)
                        {
                            revision = true;
                            if (error)
                                MessageBox.Show(@"Analisis Terminado");
                            else
                                MessageBox.Show(@"Analisis  Terminado ");


                            break;

                        }


                        else
                        {

                            listasintactico[puntosintactico] = 0;
                            puntolexico++;
                            puntosintactico--;
                            VerificarRecuperacion();
                        }

                    }
                    else
                    {
                        NuevoError(listaTokens, ref revision, 1);
                    }


                }
                else
                {
                    reglon = BuscarReglon(listasintactico[puntosintactico]);
                    columna = BuscarColumna(listaTokens[puntolexico].ValorToken);

                    regla = MatrizTransacionSintactico[reglon, columna];

                    if (regla > 0)
                    {
                        InsertaRegla(regla);

                        if (regla == 32)
                        {
                            if (listasintactico[puntosintactico - 1] == listaTokens[puntolexico + 1].ValorToken)
                            {
                                X = listaTokens[puntolexico + 1].Lexema;
                                if (listaVariables.Exists(x => x.Id == X) == true)
                                {
                                    var nuevoError = ManejoErroresSemantico(-702, listaTokens[puntolexico + 1].Linea);
                                    listaError.Add(nuevoError);
                                    X = null;

                                }

                            }
                            else
                            {
                                var nuevoError = ManejoErroresSemantico(-700, listaTokens[puntolexico + 1].Linea);
                                listaError.Add(nuevoError);
                            }

                        }
                        if (regla == 102)
                        {
                            if (listasintactico[puntosintactico] == listaTokens[puntolexico].ValorToken)
                            {
                                Y = listaTokens[puntolexico].Lexema;
                                if (X != null)
                                    listaVariables.Add(new Varia() { Id = X, TipoVariable = TipoVariable.Entero });



                            }
                            else
                            {
                                var nuevoError = ManejoErroresSemantico(-701, listaTokens[puntolexico].Linea);
                                listaError.Add(nuevoError);
                            }
                            X = null;
                            Y = null;

                        }
                        if (regla == 103)
                        {
                            if (listasintactico[puntosintactico] == listaTokens[puntolexico].ValorToken)
                            {
                                Y = listaTokens[puntolexico].Lexema;
                                if (X != null)
                                    listaVariables.Add(new Varia() { Id = X, TipoVariable = TipoVariable.String });



                            }
                            else
                            {
                                var nuevoError = ManejoErroresSemantico(-701, listaTokens[puntolexico].Linea);
                                listaError.Add(nuevoError);
                            }
                            X = null;
                            Y = null;
                        }
                        if (regla == 105)
                        {
                            if (listasintactico[puntosintactico] == listaTokens[puntolexico].ValorToken)
                            {
                                Y = listaTokens[puntolexico].Lexema;
                                if (X != null)
                                    listaVariables.Add(new Varia() { Id = X, TipoVariable = TipoVariable.Real });



                            }
                            else
                            {
                                var nuevoError = ManejoErroresSemantico(-701, listaTokens[puntolexico].Linea);
                                listaError.Add(nuevoError);
                            }
                            X = null;
                            Y = null;
                        }

                        if (regla == 27)
                        {
                            if (listaTokens[puntolexico].ValorToken == -1)
                            {
                                if (listaVariables.Exists(x => x.Id == listaTokens[puntolexico].Lexema) == false)
                                {
                                    var nuevoError = ManejoErroresSemantico(-703, listaTokens[puntolexico].Linea);
                                    listaError.Add(nuevoError);

                                }
                                aux2 = listaTokens[puntolexico].Lexema;
                            }
                            
                            puntolexico++;

                        }

                        if (regla == 15)
                        {
                            if (listasintactico[puntosintactico] == listaTokens[puntolexico].ValorToken)
                            {
                                if (listaVariables.Exists(x => x.Id == listaTokens[puntolexico].Lexema) == false)
                                {
                                    var nuevoError = ManejoErroresSemantico(-703, listaTokens[puntolexico].Linea);
                                    listaError.Add(nuevoError);
                                }
                            }
                        }
                        
                        if (regla == 17 || regla == 18)
                            ListaPolaca.Add(listaTokens[puntolexico].ValorToken.ToString());
                        

                        if (regla == 37 || regla == 38 || regla == 39 || regla == 40|| regla==144|| (reglon==18 && columna==5))
                        {
                            aux = listaTokens[puntolexico].Lexema;

                            Chequeo(); ;
                        }

                        if (reglon==18 && columna == 6)
                        {

                            for (int i = 1; i <= ListaOpera.Count; i++)
                            { 
                                ListaPolaca.Add(ListaOpera[ListaOpera.Count - i]);
                                ListaOpera.RemoveAt(ListaOpera.Count - i);
                                if (ListaOpera.Count == 1)
                                {
                                    ListaPolaca.Add(ListaOpera[ListaOpera.Count - i]);
                                    ListaOpera.RemoveAt(ListaOpera.Count - i);
                                }

                            }
                            
                            Comprobacion_Posfijo();
                            if (listaVariables.Exists(x => x.Id == aux2) == true)
                            {
                                if (ListaTipos.Count == 1)
                                {
                                    if (ListaTipos[0] == 10)
                                    {
                                        var nuevoError = ManejoErroresSemantico(-704, listaTokens[puntolexico].Linea);
                                        listaError.Add(nuevoError);
                                    }
                                    else
                                    {

                                        if (ListaTipos[0] != -2 && listaVariables[listaVariables.FindIndex(x => x.Id == aux2)].TipoVariable == TipoVariable.Entero)
                                        {
                                            var nuevoError = ManejoErroresSemantico(-704, listaTokens[puntolexico].Linea);
                                            listaError.Add(nuevoError);
                                        }
                                        else if (ListaTipos[0] != -3 && listaVariables[listaVariables.FindIndex(x => x.Id == aux2)].TipoVariable == TipoVariable.Real)
                                        {
                                            var nuevoError = ManejoErroresSemantico(-704, listaTokens[puntolexico].Linea);
                                            listaError.Add(nuevoError);
                                        }
                                        else if (listaVariables[listaVariables.FindIndex(x => x.Id == aux2)].TipoVariable == TipoVariable.String)
                                        {
                                            var nuevoError = ManejoErroresSemantico(-704, listaTokens[puntolexico].Linea);
                                            listaError.Add(nuevoError);
                                        }
                                    }

                                }
                            }
                            
                        }
                        
                        if (regla==55 || regla==58)
                        {
                            if (listaTokens[puntolexico+1].ValorToken == -1)
                            {
                                if (listaVariables.Exists(x => x.Id == listaTokens[puntolexico+1].Lexema) == false)
                                {
                                    var nuevoError = ManejoErroresSemantico(-703, listaTokens[puntolexico].Linea);
                                    listaError.Add(nuevoError);

                                }
                                
                            }
                        }

                        VerificarRecuperacion();
                    }
                    else
                    {
                        if (intentosRecuperar < 1)
                        {
                            tipoRecuperacion = TipoRecuperacion.Sobra;

                        }
                        NuevoError(listaTokens, ref revision, regla);
                    }
                }

            } while (revision != true);
        }

        private void InsertaRegla(int regla)
        {
            int i = 0;



            do
            {

                listasintactico[puntosintactico] =
                    RepositorioReglas[regla - 1, i];
                puntosintactico++;
                i++;

            } while (RepositorioReglas[regla - 1, i] != -202);
            puntosintactico--;

        }

        private int BuscarColumna(int token)
        {
            switch (token)
            {
                //ID
                case -1:
                    return 0;
                //Enteros
                case -2:
                    return 1;
                //Decimales
                case -3:
                    return 2;
                //Cadenas

                case -4:
                    return 3;
                //(                        
                case -5:
                    return 4;
                //)
                case -6:
                    return 5;
                //;
                case -7:
                    return 6;
                //.
                case -8:
                    return 7;
                //[
                case -9:
                    return 8;
                //]
                case -10:
                    return 9;
                //{
                case -11:
                    return 10;
                //}
                case -12:
                    return 11;
                //,
                case -13:
                    return 12;
                //caracter
                case -14:
                    return 13;

                //-
                case -16:
                    return 14;
                //*
                case -17:
                    return 15;
                // /
                case -18:
                    return 16;
                // =
                case -19:
                    return 17;
                //+=
                case -20:
                    return 18;
                //*=
                case -21:
                    return 19;
                // /=
                case -22:
                    return 20;
                // ||
                case -23:
                    return 21;
                // &&
                case -24:
                    return 22;
                // |
                case -25:
                    return 23;
                // &
                case -26:
                    return 24;
                // ++
                case -27:
                    return 25;
                //--
                case -28:
                    return 26;
                //<
                case -29:
                    return 27;
                //>
                case -30:
                    return 28;
                //>=
                case -31:
                    return 29;
                //<=
                case -32:
                    return 30;
                //!=
                case -33:
                    return 31;
                //==
                case -34:
                    return 32;
                //-=
                case -35:
                    return 33;
                //%
                case -36:
                    return 34;
                //¡
                case -37:
                    return 35;
                //:
                case -38:
                    return 36;
                //::
                case -39:
                    return 37;
                //^
                case -84:
                    return 38;
                //^=
                case -85:
                    return 39;
                //|=
                case -89:
                    return 40;
                //->
                case -90:
                    return 41;
                //>>
                case -91:
                    return 42;
                //<<
                case -92:
                    return 43;
                //<<=
                case -93:
                    return 44;
                //>>=
                case -94:
                    return 45;
                //!
                case -96:
                    return 46;
                //as
                case -40:
                    return 47;
                //break
                case -41:
                    return 48;
                //const
                case -42:
                    return 49;
                //continue
                case -43:
                    return 50;
                //crate
                case -44:
                    return 51;
                //else
                case -45:
                    return 52;
                //enum
                case -46:
                    return 53;
                //extern
                case -47:
                    return 54;
                //false
                case -48:
                    return 55;
                //fn
                case -49:
                    return 56;
                //for
                case -50:
                    return 57;
                //if
                case -51:
                    return 58;
                //impl
                case -52:
                    return 59;
                //in
                case -53:
                    return 60;
                //let
                case -54:
                    return 61;
                //loop
                case -55:
                    return 62;
                //match
                case -56:
                    return 63;
                //mod
                case -57:
                    return 64;
                //move
                case -58:
                    return 65;
                //mut
                case -59:
                    return 66;
                //pub
                case -60:
                    return 67;
                //ref
                case -61:
                    return 68;

                //self
                case -63:
                    return 69;
                //static
                case -64:
                    return 70;
                //struct
                case -65:
                    return 71;
                //super
                case -66:
                    return 72;
                //trait
                case -67:
                    return 73;
                //true
                case -68:
                    return 74;
                //type
                case -69:
                    return 75;
                //use
                case -70:
                    return 76;
                //where
                case -71:
                    return 77;
                //while
                case -72:
                    return 78;
                //become
                case -73:
                    return 79;
                //std
                case -74:
                    return 80;
                //do
                case -75:
                    return 81;
                //final
                case -76:
                    return 82;
                //override
                case -77:
                    return 83;
                //priv
                case -78:
                    return 84;
                //typeof
                case -79:
                    return 85;
                //unsized
                case -80:
                    return 86;
                //virtual
                case -81:
                    return 87;
                //try
                case -82:
                    return 88;
                //auto
                case -83:
                    return 89;
                //catch
                case -86:
                    return 90;
                //default
                case -87:
                    return 91;
                //new
                case -88:
                    return 92;
                //String
                case -95:
                    return 93;
                //main
                case -97:
                    return 94;
                //print
                case -98:
                    return 95;
                //println!
                case -99:
                    return 96;
                //i32
                case -100:
                    return 97;
                //str
                case -101:
                    return 98;
                //u8
                case -102:
                    return 99;
                //f32
                case -103:
                    return 100;
                //f64
                case -104:
                    return 101;
                //@
                case -201:
                    return 102;
                //+
                case -15:
                    return 103;
                default:
                    return 102;

            }
        }

        private int BuscarReglon(int regla)
        {
            switch (regla)
            {
                //s
                case 1000:
                    return 0;
                //Programa
                case 1001:
                    return 1;
                //Librerias
                case 1002:
                    return 2;
                //Lib1
                case 1003:
                    return 3;
                //Funciones
                case 1004:
                    return 4;
                //Funcion1
                case 1005:
                    return 5;
                //Funcion2
                case 1006:
                    return 6;
                //Parametros
                case 1007:
                    return 7;
                //Parametros1
                case 1008:
                    return 8;
                //Factor
                case 1009:
                    return 9;
                //Miembros
                case 1010:
                    return 10;
                //Miembros2
                case 1011:
                    return 11;
                //miembros3
                case 1012:
                    return 12;
                //asignacion
                case 1013:
                    return 13;
                //sentencias
                case 1014:
                    return 14;
                //declaracion
                case 1015:
                    return 15;
                //invoestructura
                case 1016:
                    return 16;
                //exp
                case 1017:
                    return 17;
                //termino
                case 1018:
                    return 18;
                //opera
                case 1019:
                    return 19;
                //asigestruc
                case 1020:
                    return 20;
                //asigestruc2
                case 1021:
                    return 21;
                //sentencia
                case 1022:
                    return 22;
                //if
                case 1023:
                    return 23;
                //loop
                case 1024:
                    return 24;
                //for
                case 1025:
                    return 25;
                //while
                case 1026:
                    return 26;
                //leer
                case 1027:
                    return 27;
                //escribir
                case 1028:
                    return 28;
                //Match
                case 1029:
                    return 29;
                //condicional
                case 1030:
                    return 30;
                //factorcond
                case 1031:
                    return 31;
                //terminocond
                case 1032:
                    return 32;
                //oprel
                case 1033:
                    return 33;
                //oplog
                case 1034:
                    return 34;
                //else
                case 1035:
                    return 35;
                //else1
                case 1036:
                    return 36;
                //forcond
                case 1037:
                    return 37;
                //forcond2
                case 1038:
                    return 38;
                //forigual
                case 1039:
                    return 39;
                //leervar
                case 1040:
                    return 40;
                //escribircade
                case 1041:
                    return 41;
                //varescribi
                case 1042:
                    return 42;
                //varcribi2
                case 1043:
                    return 43;
                //escribirvar
                case 1044:
                    return 44;
                //escribivar2
                case 1045:
                    return 45;
                //match2
                case 1046:
                    return 46;
                //match3
                case 1047:
                    return 47;
                //mutable
                case 1048:
                    return 48;
                //estructura
                case 1050:
                    return 49;
                //estructura2
                case 1051:
                    return 50;
                //estrucsente
                case 1052:
                    return 51;
                //estructipo
                case 1053:
                    return 52;
                //estrucsente2
                case 1054:
                    return 53;
                //trait0
                case 1049:
                    return 54;
                //trait
                case 1055:
                    return 55;
                //idtrait
                case 1056:
                    return 56;
                //traitherencia
                case 1057:
                    return 57;
                //funciontrait
                case 1058:
                    return 58;
                //funciontrait2
                case 1059:
                    return 59;
                //paratrait2-
                case 1062:
                    return 60;
                //paratrait-
                case 1060:
                    return 61;
                //miembrostrait2-
                case 1064:
                    return 62;



                //implementos-
                case 1065:
                    return 63;

                //impl-
                case 1066:
                    return 64;
                //impltipos-
                case 1067:
                    return 65;
                //idimpl-
                case 1068:
                    return 66;
                //funcionesimpl
                case 1069:
                    return 67;

                //funcionesimpl2
                case 1070:
                    return 68;
                //implobj
                case 1071:
                    return 69;
                //traitherencia2
                case 1061:
                    return 70;
                //miembrostrait
                case 1063:
                    return 71;

                //invocarmetodo
                case 1072:
                    return 72;
                //implobj2
                case 1073:
                    return 73;
                //Lib2
                case 1074:
                    return 74;
                //AsignaVari
                case 1075:
                    return 75;
                default:
                    throw new Exception("error de logica");


            }
        }

        //Agregar nuevo error
        private void NuevoError(List<Token> listaTokens, ref bool revision, int tipo)
        {
            error = true;
            var nuevoError = ManejodeErrores(tipo, listaTokens[puntolexico].Linea);
            listaError.Add(nuevoError);

            Recuperar(ref revision, ref tipoRecuperacion);
        }
        private void VerificarRecuperacion()
        {
            if (tipoRecuperacion != TipoRecuperacion.Ninguna)
            {
                tipoRecuperacion = TipoRecuperacion.Ninguna;
                intentosRecuperar = 0;
            }
        }

        //Errores Sintacticos
        private Error ManejodeErrores(int error, int linea)
        {
            string mensajeError = "";
            switch (error)
            {
                case 1:
                    mensajeError = "Se esperaba el simbolo:" + listasintactico[puntosintactico];
                    break;
                case -600:
                    mensajeError = "se esperaba una estructura de programa";
                    break;
                case -601:
                    mensajeError = "estructura incorrecta de libreria";
                    break;
                case -602:
                    mensajeError = "estructura incorrecta de funcion";
                    break;
                case -603:
                    mensajeError = "id valido para funcio";
                    break;
                case -604:
                    mensajeError = "parametros de funcion incorrectos";
                    break;
                case -605:
                    mensajeError = "miembros de la funcion invalidos";
                    break;
                case -606:
                    mensajeError = "Asignacion incorrecta";
                    break;
                case -607:
                    mensajeError = "sentencia incorrecta";
                    break;
                case -608:
                    mensajeError = "Declaracion incorrecta";
                    break;
                case -609:
                    mensajeError = "Error al invocar Struct";
                    break;
                case -610:
                    mensajeError = "Expresion escrita de manera incorrecta";
                    break;
                case -611:
                    mensajeError = "Termino escrito incorrecto";
                    break;
                case -612:
                    mensajeError = "Operador inexistente ";
                    break;
                case -613:
                    mensajeError = "Asignacion de estructura incorrecta";
                    break;
                case -614:
                    mensajeError = "Sentencia no valida";
                    break;
                case -615:
                    mensajeError = "Estructura del if incorrecta";
                    break;
                case -616:
                    mensajeError = "Estructura del Loop incorrecta";
                    break;
                case -617:
                    mensajeError = "Estructura For incorrecta";
                    break;
                case -618:
                    mensajeError = "Estructura While incorrecta";
                    break;
                case -619:
                    mensajeError = "Estructura incorrecta de leer datos";
                    break;
                case -620:
                    mensajeError = "Estructura de Escribir incorrecta";
                    break;
                case -621:
                    mensajeError = "Estructura incorrecta de match";
                    break;
                case -622:
                    mensajeError = "Condicional escrita de manera incorrecta";
                    break;
                case -623:
                    mensajeError = "Operador Relacionar incorrecto";
                    break;
                case -624:
                    mensajeError = "Operador Logico incorrecto";
                    break;
                case -625:
                    mensajeError = "Estructura del else if incorrecta";
                    break;
                case -626:
                    mensajeError = "Error del condicional del For";
                    break;
                case -627:
                    mensajeError = "Variable leer incorrecta";
                    break;
                case -628:
                    mensajeError = "Error al escribir cadena";
                    break;
                case -629:
                    mensajeError = "Error al invocar variable en la cadena";
                    break;
                case -630:
                    mensajeError = "Error al invocar la variable en el escribir";
                    break;
                case -631:
                    mensajeError = "Error al hacer variable muteable";
                    break;
                case -632:
                    mensajeError = "Error en las sentencias de estructura";
                    break;
                case -633:
                    mensajeError = "Tipo de estructura incorrecta";
                    break;
                case -634:
                    mensajeError = "Estrucutra incorrecta de trait";
                    break;
                case -635:
                    mensajeError = "Estructura incorrecta de struct";
                    break;
                case -636:
                    mensajeError = "Id invalido para struct";
                    break;
                case -637:
                    mensajeError = "Funcion incorrecta para trait";
                    break;
                case -638:
                    mensajeError = " Error en la herencia de trait";
                    break;
                case -639:
                    mensajeError = "Error funcion trait";
                    break;
                case -640:
                    mensajeError = "Error parametros trait";
                    break;
                case -641:
                    mensajeError = "Error en los miembros del trait";
                    break;
                case -642:
                    mensajeError = "Error en la estructura de impl";
                    break;
                case -643:
                    mensajeError = "id invalida para impl";
                    break;
                case -644:
                    mensajeError = "error en la funcion del impl";
                    break;
                case -645:
                    mensajeError = "Error en implementar objeto en impl";
                    break;
                case -646:
                    mensajeError = "Error al invocar metodo";
                    break;



            }
            return new Error() { Codigo = error, MensajeError = mensajeError, Tipo = TipoError.Sintatico, Linea = linea };
        }

        //Recuperaracion de errores .
        private void Recuperar(ref bool revision, ref TipoRecuperacion tipo)
        {
            revision = true;
            if (intentosRecuperar > 3)
            {
                tipo = TipoRecuperacion.NoMas;
            }
            intentosRecuperar++;
            switch (tipo)
            {
                case TipoRecuperacion.Ninguna:
                    puntosintactico--;
                    tipo++;
                    break;
                case TipoRecuperacion.Falta:
                    puntosintactico--;
                    if (intentosRecuperar == 3)
                    {
                        puntosintactico += 3;
                        tipo = TipoRecuperacion.Diferentes;
                    }
                    break;
                case TipoRecuperacion.Sobra:
                    if (intentosRecuperar == 3)
                    {
                        puntolexico -= 2;
                        tipo = TipoRecuperacion.Falta;
                    }
                    puntolexico++;
                    break;
                case TipoRecuperacion.Diferentes:
                    puntolexico++;
                    puntosintactico--;
                    break;
                default:
                    revision = true;
                    MessageBox.Show(@"Analisis Sintactico no se recupero, detencion automatica");
                    break;
            }
        }




        //Errores semanticos con su respectivo numeros
        private Error ManejoErroresSemantico(int error, int linea)
        {
            string mensajeError = "";
            switch (error)
            {
                case -700:
                    mensajeError = "Identificador invalido";
                    break;
                case -701:
                    mensajeError = "Tipo de variable invalido";
                    break;
                case -702:
                    mensajeError = "Variable ya inicializada";
                    break;
                case -703:
                    mensajeError = "Variable no inicializada";
                    break;
                case -704:
                    mensajeError = "Incompatibilidad de Tipos";
                    break;


            }
            return new Error() { Codigo = error, MensajeError = mensajeError, Tipo = TipoError.Semantico, Linea = linea };
        }
        //  Comprobación con las lista de operaciones
        private void Chequeo()
        {
            if (ListaOpera.Count == 0)
            {
                if (aux != ")")
                    ListaOpera.Add(aux);
                
            }
            else
            {
                if (aux == "(")
                    ListaOpera.Add(aux);
                  

                else if (aux == ")")
                {
                    
                    
                    for (int i = ListaOpera.Count; true; i--)
                    {
                        ListaPolaca.Add(ListaOpera[i-1]);
                        ListaOpera.RemoveAt(i-1);
                        if (ListaOpera.Count == 1 )
                        {
                            ListaOpera.RemoveAt(ListaOpera.Count-1);
                            break;
                        }
                        else if (ListaOpera[ListaOpera.Count-1] == "(")
                        {
                            
                            ListaOpera.RemoveAt(ListaOpera.Count - 1);
                            break;
                        }
                    }
             
                }

                else if (aux == "+")
                {
                    if (ListaOpera[ListaOpera.Count - 1] == "*" || ListaOpera[ListaOpera.Count - 1] == "/")
                    {
                        for (int i = 1; i <= ListaOpera.Count; i++)
                        {
                            ListaPolaca.Add(ListaOpera[ListaOpera.Count - i]);
                            ListaOpera.RemoveAt(ListaOpera.Count - i);
                            if (ListaOpera.Count == 1)
                            {
                                ListaPolaca.Add(ListaOpera[ListaOpera.Count - i]);
                                ListaOpera.RemoveAt(ListaOpera.Count - i);
                            }

                        }
                        ListaOpera.Add(aux);



                    }

                    else if (ListaOpera[ListaOpera.Count - 1] == "+" || ListaOpera[ListaOpera.Count - 1] == "-")
                    {
                        ListaPolaca.Add(ListaOpera[ListaOpera.Count - 1]);
                        ListaOpera[ListaOpera.Count - 1] = aux;
                    }

                    else if (ListaOpera[ListaOpera.Count - 1] == "(")
                        ListaOpera.Add(aux);



                }
                else if (aux == "-")
                {
                    if (ListaOpera[ListaOpera.Count - 1] == "*" || ListaOpera[ListaOpera.Count - 1] == "/")
                    {
                        for (int i = 1; i <= ListaOpera.Count; i++)
                        {
                            ListaPolaca.Add(ListaOpera[ListaOpera.Count - i]);
                            ListaOpera.RemoveAt(ListaOpera.Count - i);
                            if (ListaOpera.Count == 1)
                            {
                                ListaPolaca.Add(ListaOpera[ListaOpera.Count-i]);
                                ListaOpera.RemoveAt(ListaOpera.Count - i);
                            }
                            
                        }
                        ListaOpera.Add(aux);
                    }
                    else if (ListaOpera[ListaOpera.Count - 1] == "+" || ListaOpera[ListaOpera.Count - 1] == "-")
                    {
                        ListaPolaca.Add(ListaOpera[ListaOpera.Count - 1]);
                        ListaOpera[ListaOpera.Count - 1] = aux;
                    }
                    else if (ListaOpera[ListaOpera.Count - 1] == "(")
                        ListaOpera.Add(aux);


                }
                else if (aux == "*")
                {
                    if (ListaOpera[ListaOpera.Count-1] == "*" || ListaOpera[ListaOpera.Count-1] == "/")
                    {
                        ListaPolaca.Add(ListaOpera[ListaOpera.Count - 1]);
                        ListaOpera[ListaOpera.Count - 1] = aux;
                    }
                    else if (ListaOpera[ListaOpera.Count-1] == "+" || ListaOpera[ListaOpera.Count-1] == "-")

                        ListaOpera.Add(aux);
                       

                    else if (ListaOpera[ListaOpera.Count - 1] == "(")
                        ListaOpera.Add(aux);

                }
                else if (aux == "/")
                {
                    if (ListaOpera[ListaOpera.Count - 1] == "*" || ListaOpera[ListaOpera.Count - 1] == "/")
                    {
                        ListaPolaca.Add(ListaOpera[ListaOpera.Count - 1]);
                        ListaOpera[ListaOpera.Count - 1] = aux;
                    }
                    else if (ListaOpera[ListaOpera.Count - 1] == "+" || ListaOpera[ListaOpera.Count - 1] == "-")
                        ListaOpera.Add(aux);
      
                    else if (ListaOpera[ListaOpera.Count - 1] == "(")
                        ListaOpera.Add(aux);
                    

                }
            }


        }

        //Comprobacion de posfijo
        private void Comprobacion_Posfijo()
        {
            convertido=0;
            
            for (int i = 0; i <= ListaPolaca.Count-1; i++)
            {
                if (ListaPolaca[i] != "+" && ListaPolaca[i] != "-" && ListaPolaca[i] != "*" && ListaPolaca[i] != "/")
                {
                    convertido = Int32.Parse(ListaPolaca[i]);
                    ListaTipos.Add(convertido);
                }
                else
                {
                    if (ListaPolaca[i] == "+")
                    {
                        if (ListaTipos[ListaTipos.Count - 1] == -2)
                            Op2 = 0;
                        else
                            Op2 = 1;
                        if (ListaTipos[ListaTipos.Count - 2] == -2)
                            Op1 = 0;
                        else
                            Op1 = 1;
                        

                        
                        ListaTipos.RemoveAt(ListaTipos.Count - 1);
                        ListaTipos[ListaTipos.Count - 1] = Suma[Op1, Op2];

                    }
                    if (ListaPolaca[i] == "-")
                    {
                        if (ListaTipos[ListaTipos.Count - 1] == -2)
                            Op2 = 0;
                        else
                            Op2 = 1;
                        if (ListaTipos[ListaTipos.Count - 2] == -2)
                            Op1 = 0;
                        else
                            Op1 = 1;

                       
                        ListaTipos.RemoveAt(ListaTipos.Count - 1);
                        ListaTipos[ListaTipos.Count - 1] = Resta[Op1, Op2];

                    }
                    if (ListaPolaca[i] == "*")
                    {
                        if (ListaTipos[ListaTipos.Count - 1] == -2)
                            Op2 = 0;
                        else
                            Op2 = 1;
                        if (ListaTipos[ListaTipos.Count - 2] == -2)
                            Op1 = 0;
                        else
                            Op1 = 1;
                       
                        ListaTipos.RemoveAt(ListaTipos.Count - 1);
                        ListaTipos[ListaTipos.Count - 1] = Multi[Op1, Op2];

                    }
                    if (ListaPolaca[i] == "/")
                    {
                        if (ListaTipos[ListaTipos.Count - 1] == -2)
                            Op2 = 0;
                        else
                            Op2 = 1;
                        if (ListaTipos[ListaTipos.Count - 2] == -2)
                            Op1 = 0;
                        else
                            Op1 = 1;

                        ;
                        ListaTipos.RemoveAt(ListaTipos.Count - 1);
                        ListaTipos[ListaTipos.Count - 1] = Divi[Op1, Op2];
                        

                    }

                }
            }
        }

       

        
    }
}
